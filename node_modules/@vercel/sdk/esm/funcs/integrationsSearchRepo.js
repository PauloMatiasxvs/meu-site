/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { encodeFormQuery } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { SearchRepoRequest$outboundSchema, SearchRepoResponseBody$inboundSchema, } from "../models/searchrepoop.js";
import { VercelBadRequestError$inboundSchema, } from "../models/vercelbadrequesterror.js";
/**
 * List git repositories linked to namespace by provider
 *
 * @remarks
 * Lists git repositories linked to a namespace `id` for a supported provider. A specific namespace `id` can be obtained via the `git-namespaces`  endpoint. Supported providers are `github`, `gitlab` and `bitbucket`. If the provider or namespace is not provided, it will try to obtain it from the user that authenticated the request.
 */
export async function integrationsSearchRepo(client, request, options) {
    const parsed = safeParse(request, (value) => SearchRepoRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return parsed;
    }
    const payload = parsed.value;
    const body = null;
    const path = pathToFunc("/v1/integrations/search-repo")();
    const query = encodeFormQuery({
        "host": payload.host,
        "installationId": payload.installationId,
        "namespaceId": payload.namespaceId,
        "provider": payload.provider,
        "query": payload.query,
        "slug": payload.slug,
        "teamId": payload.teamId,
    });
    const headers = new Headers(compactMap({
        Accept: "application/json",
    }));
    const secConfig = await extractSecurity(client._options.bearerToken);
    const securityInput = secConfig == null ? {} : { bearerToken: secConfig };
    const requestSecurity = resolveGlobalSecurity(securityInput);
    const context = {
        operationID: "searchRepo",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.bearerToken,
        retryConfig: options?.retries
            || client._options.retryConfig
            || { strategy: "none" },
        retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        query: query,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
    }, options);
    if (!requestRes.ok) {
        return requestRes;
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: ["400", "403", "4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes,
    });
    if (!doResult.ok) {
        return doResult;
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: { Response: response, Request: req },
    };
    const [result] = await M.match(M.json(200, SearchRepoResponseBody$inboundSchema), M.jsonErr(400, VercelBadRequestError$inboundSchema), M.fail([403, "4XX"]), M.fail("5XX"))(response, { extraFields: responseFields });
    if (!result.ok) {
        return result;
    }
    return result;
}
//# sourceMappingURL=integrationsSearchRepo.js.map