import { VercelCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import { CreateEventRequest } from "../models/createeventop.js";
import { ConnectionError, InvalidRequestError, RequestAbortedError, RequestTimeoutError, UnexpectedClientError } from "../models/httpclienterrors.js";
import { SDKError } from "../models/sdkerror.js";
import { SDKValidationError } from "../models/sdkvalidationerror.js";
import { VercelBadRequestError } from "../models/vercelbadrequesterror.js";
import { VercelForbiddenError } from "../models/vercelforbiddenerror.js";
import { Result } from "../types/fp.js";
/**
 * Create Event
 *
 * @remarks
 * Partner notifies Vercel of any changes made to an Installation or a Resource. Vercel is expected to use `list-resources` and other read APIs to get the new state. <br/> <br/> `resource.updated` event should be dispatched when any state of a resource linked to Vercel is modified by the partner. <br/> <br/> Use cases: <br/> <br/> - The user renames a database in the partner’s application. The partner should dispatch a `resource.updated` event to notify Vercel to update the resource in Vercel’s datastores. <br/>
 */
export declare function marketplaceCreateEvent(client: VercelCore, request: CreateEventRequest, options?: RequestOptions): Promise<Result<void, VercelBadRequestError | VercelForbiddenError | SDKError | SDKValidationError | UnexpectedClientError | InvalidRequestError | RequestAbortedError | RequestTimeoutError | ConnectionError>>;
//# sourceMappingURL=marketplaceCreateEvent.d.ts.map