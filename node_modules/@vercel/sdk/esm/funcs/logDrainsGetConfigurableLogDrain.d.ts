import { VercelCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import { GetConfigurableLogDrainRequest, GetConfigurableLogDrainResponseBody } from "../models/getconfigurablelogdrainop.js";
import { ConnectionError, InvalidRequestError, RequestAbortedError, RequestTimeoutError, UnexpectedClientError } from "../models/httpclienterrors.js";
import { SDKError } from "../models/sdkerror.js";
import { SDKValidationError } from "../models/sdkvalidationerror.js";
import { VercelBadRequestError } from "../models/vercelbadrequesterror.js";
import { VercelForbiddenError } from "../models/vercelforbiddenerror.js";
import { VercelNotFoundError } from "../models/vercelnotfounderror.js";
import { Result } from "../types/fp.js";
/**
 * Retrieves a Configurable Log Drain
 *
 * @remarks
 * Retrieves a Configurable Log Drain. This endpoint must be called with a team AccessToken (integration OAuth2 clients are not allowed). Only log drains owned by the authenticated team can be accessed.
 */
export declare function logDrainsGetConfigurableLogDrain(client: VercelCore, request: GetConfigurableLogDrainRequest, options?: RequestOptions): Promise<Result<GetConfigurableLogDrainResponseBody, VercelBadRequestError | VercelForbiddenError | VercelNotFoundError | SDKError | SDKValidationError | UnexpectedClientError | InvalidRequestError | RequestAbortedError | RequestTimeoutError | ConnectionError>>;
//# sourceMappingURL=logDrainsGetConfigurableLogDrain.d.ts.map