/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
export const CreateEdgeConfigType = {
    Flags: "flags",
};
/** @internal */
export const Two5$inboundSchema = z
    .object({});
/** @internal */
export const Two5$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Two5$;
(function (Two5$) {
    /** @deprecated use `Two5$inboundSchema` instead. */
    Two5$.inboundSchema = Two5$inboundSchema;
    /** @deprecated use `Two5$outboundSchema` instead. */
    Two5$.outboundSchema = Two5$outboundSchema;
})(Two5$ || (Two5$ = {}));
export function two5ToJSON(two5) {
    return JSON.stringify(Two5$outboundSchema.parse(two5));
}
export function two5FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Two5$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Two5' from JSON`);
}
/** @internal */
export const Items2$inboundSchema = z
    .union([
    z.lazy(() => Two5$inboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.any(),
]);
/** @internal */
export const Items2$outboundSchema = z.union([
    z.lazy(() => Two5$outboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.any(),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Items2$;
(function (Items2$) {
    /** @deprecated use `Items2$inboundSchema` instead. */
    Items2$.inboundSchema = Items2$inboundSchema;
    /** @deprecated use `Items2$outboundSchema` instead. */
    Items2$.outboundSchema = Items2$outboundSchema;
})(Items2$ || (Items2$ = {}));
export function items2ToJSON(items2) {
    return JSON.stringify(Items2$outboundSchema.parse(items2));
}
export function items2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Items2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Items2' from JSON`);
}
/** @internal */
export const One5$inboundSchema = z
    .object({});
/** @internal */
export const One5$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var One5$;
(function (One5$) {
    /** @deprecated use `One5$inboundSchema` instead. */
    One5$.inboundSchema = One5$inboundSchema;
    /** @deprecated use `One5$outboundSchema` instead. */
    One5$.outboundSchema = One5$outboundSchema;
})(One5$ || (One5$ = {}));
export function one5ToJSON(one5) {
    return JSON.stringify(One5$outboundSchema.parse(one5));
}
export function one5FromJSON(jsonString) {
    return safeParse(jsonString, (x) => One5$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'One5' from JSON`);
}
/** @internal */
export const Items1$inboundSchema = z
    .union([
    z.lazy(() => One5$inboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.any(),
]);
/** @internal */
export const Items1$outboundSchema = z.union([
    z.lazy(() => One5$outboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.any(),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Items1$;
(function (Items1$) {
    /** @deprecated use `Items1$inboundSchema` instead. */
    Items1$.inboundSchema = Items1$inboundSchema;
    /** @deprecated use `Items1$outboundSchema` instead. */
    Items1$.outboundSchema = Items1$outboundSchema;
})(Items1$ || (Items1$ = {}));
export function items1ToJSON(items1) {
    return JSON.stringify(Items1$outboundSchema.parse(items1));
}
export function items1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => Items1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Items1' from JSON`);
}
/** @internal */
export const Items$inboundSchema = z
    .union([
    z.union([
        z.lazy(() => One5$inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
        z.any(),
    ]),
    z.array(z.union([
        z.lazy(() => Two5$inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
        z.any(),
    ])),
]);
/** @internal */
export const Items$outboundSchema = z.union([
    z.union([
        z.lazy(() => One5$outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
        z.any(),
    ]),
    z.array(z.union([
        z.lazy(() => Two5$outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
        z.any(),
    ])),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Items$;
(function (Items$) {
    /** @deprecated use `Items$inboundSchema` instead. */
    Items$.inboundSchema = Items$inboundSchema;
    /** @deprecated use `Items$outboundSchema` instead. */
    Items$.outboundSchema = Items$outboundSchema;
})(Items$ || (Items$ = {}));
export function itemsToJSON(items) {
    return JSON.stringify(Items$outboundSchema.parse(items));
}
export function itemsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Items$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Items' from JSON`);
}
/** @internal */
export const CreateEdgeConfigRequestBody$inboundSchema = z.object({
    slug: z.string(),
    items: z.record(z.union([
        z.union([
            z.lazy(() => One5$inboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
            z.any(),
        ]),
        z.array(z.union([
            z.lazy(() => Two5$inboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
            z.any(),
        ])),
    ])).optional(),
});
/** @internal */
export const CreateEdgeConfigRequestBody$outboundSchema = z.object({
    slug: z.string(),
    items: z.record(z.union([
        z.union([
            z.lazy(() => One5$outboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
            z.any(),
        ]),
        z.array(z.union([
            z.lazy(() => Two5$outboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
            z.any(),
        ])),
    ])).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateEdgeConfigRequestBody$;
(function (CreateEdgeConfigRequestBody$) {
    /** @deprecated use `CreateEdgeConfigRequestBody$inboundSchema` instead. */
    CreateEdgeConfigRequestBody$.inboundSchema = CreateEdgeConfigRequestBody$inboundSchema;
    /** @deprecated use `CreateEdgeConfigRequestBody$outboundSchema` instead. */
    CreateEdgeConfigRequestBody$.outboundSchema = CreateEdgeConfigRequestBody$outboundSchema;
})(CreateEdgeConfigRequestBody$ || (CreateEdgeConfigRequestBody$ = {}));
export function createEdgeConfigRequestBodyToJSON(createEdgeConfigRequestBody) {
    return JSON.stringify(CreateEdgeConfigRequestBody$outboundSchema.parse(createEdgeConfigRequestBody));
}
export function createEdgeConfigRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateEdgeConfigRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateEdgeConfigRequestBody' from JSON`);
}
/** @internal */
export const CreateEdgeConfigRequest$inboundSchema = z.object({
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => CreateEdgeConfigRequestBody$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const CreateEdgeConfigRequest$outboundSchema = z.object({
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => CreateEdgeConfigRequestBody$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateEdgeConfigRequest$;
(function (CreateEdgeConfigRequest$) {
    /** @deprecated use `CreateEdgeConfigRequest$inboundSchema` instead. */
    CreateEdgeConfigRequest$.inboundSchema = CreateEdgeConfigRequest$inboundSchema;
    /** @deprecated use `CreateEdgeConfigRequest$outboundSchema` instead. */
    CreateEdgeConfigRequest$.outboundSchema = CreateEdgeConfigRequest$outboundSchema;
})(CreateEdgeConfigRequest$ || (CreateEdgeConfigRequest$ = {}));
export function createEdgeConfigRequestToJSON(createEdgeConfigRequest) {
    return JSON.stringify(CreateEdgeConfigRequest$outboundSchema.parse(createEdgeConfigRequest));
}
export function createEdgeConfigRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateEdgeConfigRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateEdgeConfigRequest' from JSON`);
}
/** @internal */
export const CreateEdgeConfigTransfer$inboundSchema = z.object({
    fromAccountId: z.string(),
    startedAt: z.number(),
    doneAt: z.nullable(z.number()),
});
/** @internal */
export const CreateEdgeConfigTransfer$outboundSchema = z.object({
    fromAccountId: z.string(),
    startedAt: z.number(),
    doneAt: z.nullable(z.number()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateEdgeConfigTransfer$;
(function (CreateEdgeConfigTransfer$) {
    /** @deprecated use `CreateEdgeConfigTransfer$inboundSchema` instead. */
    CreateEdgeConfigTransfer$.inboundSchema = CreateEdgeConfigTransfer$inboundSchema;
    /** @deprecated use `CreateEdgeConfigTransfer$outboundSchema` instead. */
    CreateEdgeConfigTransfer$.outboundSchema = CreateEdgeConfigTransfer$outboundSchema;
})(CreateEdgeConfigTransfer$ || (CreateEdgeConfigTransfer$ = {}));
export function createEdgeConfigTransferToJSON(createEdgeConfigTransfer) {
    return JSON.stringify(CreateEdgeConfigTransfer$outboundSchema.parse(createEdgeConfigTransfer));
}
export function createEdgeConfigTransferFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateEdgeConfigTransfer$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateEdgeConfigTransfer' from JSON`);
}
/** @internal */
export const CreateEdgeConfigSchema$inboundSchema = z.object({});
/** @internal */
export const CreateEdgeConfigSchema$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateEdgeConfigSchema$;
(function (CreateEdgeConfigSchema$) {
    /** @deprecated use `CreateEdgeConfigSchema$inboundSchema` instead. */
    CreateEdgeConfigSchema$.inboundSchema = CreateEdgeConfigSchema$inboundSchema;
    /** @deprecated use `CreateEdgeConfigSchema$outboundSchema` instead. */
    CreateEdgeConfigSchema$.outboundSchema = CreateEdgeConfigSchema$outboundSchema;
})(CreateEdgeConfigSchema$ || (CreateEdgeConfigSchema$ = {}));
export function createEdgeConfigSchemaToJSON(createEdgeConfigSchema) {
    return JSON.stringify(CreateEdgeConfigSchema$outboundSchema.parse(createEdgeConfigSchema));
}
export function createEdgeConfigSchemaFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateEdgeConfigSchema$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateEdgeConfigSchema' from JSON`);
}
/** @internal */
export const CreateEdgeConfigType$inboundSchema = z.nativeEnum(CreateEdgeConfigType);
/** @internal */
export const CreateEdgeConfigType$outboundSchema = CreateEdgeConfigType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateEdgeConfigType$;
(function (CreateEdgeConfigType$) {
    /** @deprecated use `CreateEdgeConfigType$inboundSchema` instead. */
    CreateEdgeConfigType$.inboundSchema = CreateEdgeConfigType$inboundSchema;
    /** @deprecated use `CreateEdgeConfigType$outboundSchema` instead. */
    CreateEdgeConfigType$.outboundSchema = CreateEdgeConfigType$outboundSchema;
})(CreateEdgeConfigType$ || (CreateEdgeConfigType$ = {}));
/** @internal */
export const CreateEdgeConfigPurpose$inboundSchema = z.object({
    type: CreateEdgeConfigType$inboundSchema,
    projectId: z.string(),
});
/** @internal */
export const CreateEdgeConfigPurpose$outboundSchema = z.object({
    type: CreateEdgeConfigType$outboundSchema,
    projectId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateEdgeConfigPurpose$;
(function (CreateEdgeConfigPurpose$) {
    /** @deprecated use `CreateEdgeConfigPurpose$inboundSchema` instead. */
    CreateEdgeConfigPurpose$.inboundSchema = CreateEdgeConfigPurpose$inboundSchema;
    /** @deprecated use `CreateEdgeConfigPurpose$outboundSchema` instead. */
    CreateEdgeConfigPurpose$.outboundSchema = CreateEdgeConfigPurpose$outboundSchema;
})(CreateEdgeConfigPurpose$ || (CreateEdgeConfigPurpose$ = {}));
export function createEdgeConfigPurposeToJSON(createEdgeConfigPurpose) {
    return JSON.stringify(CreateEdgeConfigPurpose$outboundSchema.parse(createEdgeConfigPurpose));
}
export function createEdgeConfigPurposeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateEdgeConfigPurpose$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateEdgeConfigPurpose' from JSON`);
}
/** @internal */
export const CreateEdgeConfigResponseBody$inboundSchema = z.object({
    createdAt: z.number().optional(),
    updatedAt: z.number().optional(),
    id: z.string().optional(),
    slug: z.string().optional(),
    ownerId: z.string().optional(),
    digest: z.string().optional(),
    transfer: z.lazy(() => CreateEdgeConfigTransfer$inboundSchema).optional(),
    schema: z.lazy(() => CreateEdgeConfigSchema$inboundSchema).optional(),
    purpose: z.lazy(() => CreateEdgeConfigPurpose$inboundSchema).optional(),
    sizeInBytes: z.number(),
    itemCount: z.number(),
});
/** @internal */
export const CreateEdgeConfigResponseBody$outboundSchema = z.object({
    createdAt: z.number().optional(),
    updatedAt: z.number().optional(),
    id: z.string().optional(),
    slug: z.string().optional(),
    ownerId: z.string().optional(),
    digest: z.string().optional(),
    transfer: z.lazy(() => CreateEdgeConfigTransfer$outboundSchema).optional(),
    schema: z.lazy(() => CreateEdgeConfigSchema$outboundSchema).optional(),
    purpose: z.lazy(() => CreateEdgeConfigPurpose$outboundSchema).optional(),
    sizeInBytes: z.number(),
    itemCount: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateEdgeConfigResponseBody$;
(function (CreateEdgeConfigResponseBody$) {
    /** @deprecated use `CreateEdgeConfigResponseBody$inboundSchema` instead. */
    CreateEdgeConfigResponseBody$.inboundSchema = CreateEdgeConfigResponseBody$inboundSchema;
    /** @deprecated use `CreateEdgeConfigResponseBody$outboundSchema` instead. */
    CreateEdgeConfigResponseBody$.outboundSchema = CreateEdgeConfigResponseBody$outboundSchema;
})(CreateEdgeConfigResponseBody$ || (CreateEdgeConfigResponseBody$ = {}));
export function createEdgeConfigResponseBodyToJSON(createEdgeConfigResponseBody) {
    return JSON.stringify(CreateEdgeConfigResponseBody$outboundSchema.parse(createEdgeConfigResponseBody));
}
export function createEdgeConfigResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateEdgeConfigResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateEdgeConfigResponseBody' from JSON`);
}
//# sourceMappingURL=createedgeconfigop.js.map