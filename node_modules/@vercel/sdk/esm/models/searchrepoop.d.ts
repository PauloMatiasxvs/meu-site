import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type NamespaceId = string | number;
export declare const QueryParamProvider: {
    readonly Github: "github";
    readonly GithubCustomHost: "github-custom-host";
    readonly Gitlab: "gitlab";
    readonly Bitbucket: "bitbucket";
};
export type QueryParamProvider = ClosedEnum<typeof QueryParamProvider>;
export type SearchRepoRequest = {
    query?: string | undefined;
    namespaceId?: string | number | null | undefined;
    provider?: QueryParamProvider | undefined;
    installationId?: string | undefined;
    /**
     * The custom Git host if using a custom Git provider, like GitHub Enterprise Server
     */
    host?: string | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};
export declare const ResponseBodyProvider: {
    readonly Github: "github";
    readonly GithubCustomHost: "github-custom-host";
    readonly Gitlab: "gitlab";
    readonly Bitbucket: "bitbucket";
};
export type ResponseBodyProvider = ClosedEnum<typeof ResponseBodyProvider>;
export type ResponseBodyNamespaceId = string | number;
export type GitAccount = {
    provider: ResponseBodyProvider;
    namespaceId: string | number | null;
};
export type ResponseBodyId = string | number;
export declare const SearchRepoResponseBodyProvider: {
    readonly Github: "github";
    readonly GithubCustomHost: "github-custom-host";
    readonly Gitlab: "gitlab";
    readonly Bitbucket: "bitbucket";
};
export type SearchRepoResponseBodyProvider = ClosedEnum<typeof SearchRepoResponseBodyProvider>;
export type SearchRepoResponseBodyId = string | number;
export type Owner = {
    id: string | number;
    name: string;
};
export declare const ResponseBodyOwnerType: {
    readonly User: "user";
    readonly Team: "team";
};
export type ResponseBodyOwnerType = ClosedEnum<typeof ResponseBodyOwnerType>;
export type Repos = {
    id: string | number;
    provider: SearchRepoResponseBodyProvider;
    url: string;
    name: string;
    slug: string;
    namespace: string;
    owner: Owner;
    ownerType: ResponseBodyOwnerType;
    private: boolean;
    defaultBranch: string;
    updatedAt: number;
};
export type SearchRepoResponseBody2 = {
    gitAccount: GitAccount;
    repos: Array<Repos>;
};
export type SearchRepoResponseBody1 = {};
export type SearchRepoResponseBody = SearchRepoResponseBody1 | SearchRepoResponseBody2;
/** @internal */
export declare const NamespaceId$inboundSchema: z.ZodType<NamespaceId, z.ZodTypeDef, unknown>;
/** @internal */
export type NamespaceId$Outbound = string | number;
/** @internal */
export declare const NamespaceId$outboundSchema: z.ZodType<NamespaceId$Outbound, z.ZodTypeDef, NamespaceId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NamespaceId$ {
    /** @deprecated use `NamespaceId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<NamespaceId, z.ZodTypeDef, unknown>;
    /** @deprecated use `NamespaceId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<NamespaceId$Outbound, z.ZodTypeDef, NamespaceId>;
    /** @deprecated use `NamespaceId$Outbound` instead. */
    type Outbound = NamespaceId$Outbound;
}
export declare function namespaceIdToJSON(namespaceId: NamespaceId): string;
export declare function namespaceIdFromJSON(jsonString: string): SafeParseResult<NamespaceId, SDKValidationError>;
/** @internal */
export declare const QueryParamProvider$inboundSchema: z.ZodNativeEnum<typeof QueryParamProvider>;
/** @internal */
export declare const QueryParamProvider$outboundSchema: z.ZodNativeEnum<typeof QueryParamProvider>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace QueryParamProvider$ {
    /** @deprecated use `QueryParamProvider$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
        readonly GithubCustomHost: "github-custom-host";
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
    }>;
    /** @deprecated use `QueryParamProvider$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
        readonly GithubCustomHost: "github-custom-host";
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
    }>;
}
/** @internal */
export declare const SearchRepoRequest$inboundSchema: z.ZodType<SearchRepoRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type SearchRepoRequest$Outbound = {
    query?: string | undefined;
    namespaceId?: string | number | null | undefined;
    provider?: string | undefined;
    installationId?: string | undefined;
    host?: string | undefined;
    teamId?: string | undefined;
    slug?: string | undefined;
};
/** @internal */
export declare const SearchRepoRequest$outboundSchema: z.ZodType<SearchRepoRequest$Outbound, z.ZodTypeDef, SearchRepoRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SearchRepoRequest$ {
    /** @deprecated use `SearchRepoRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SearchRepoRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `SearchRepoRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SearchRepoRequest$Outbound, z.ZodTypeDef, SearchRepoRequest>;
    /** @deprecated use `SearchRepoRequest$Outbound` instead. */
    type Outbound = SearchRepoRequest$Outbound;
}
export declare function searchRepoRequestToJSON(searchRepoRequest: SearchRepoRequest): string;
export declare function searchRepoRequestFromJSON(jsonString: string): SafeParseResult<SearchRepoRequest, SDKValidationError>;
/** @internal */
export declare const ResponseBodyProvider$inboundSchema: z.ZodNativeEnum<typeof ResponseBodyProvider>;
/** @internal */
export declare const ResponseBodyProvider$outboundSchema: z.ZodNativeEnum<typeof ResponseBodyProvider>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyProvider$ {
    /** @deprecated use `ResponseBodyProvider$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
        readonly GithubCustomHost: "github-custom-host";
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
    }>;
    /** @deprecated use `ResponseBodyProvider$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
        readonly GithubCustomHost: "github-custom-host";
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
    }>;
}
/** @internal */
export declare const ResponseBodyNamespaceId$inboundSchema: z.ZodType<ResponseBodyNamespaceId, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodyNamespaceId$Outbound = string | number;
/** @internal */
export declare const ResponseBodyNamespaceId$outboundSchema: z.ZodType<ResponseBodyNamespaceId$Outbound, z.ZodTypeDef, ResponseBodyNamespaceId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyNamespaceId$ {
    /** @deprecated use `ResponseBodyNamespaceId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodyNamespaceId, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodyNamespaceId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodyNamespaceId$Outbound, z.ZodTypeDef, ResponseBodyNamespaceId>;
    /** @deprecated use `ResponseBodyNamespaceId$Outbound` instead. */
    type Outbound = ResponseBodyNamespaceId$Outbound;
}
export declare function responseBodyNamespaceIdToJSON(responseBodyNamespaceId: ResponseBodyNamespaceId): string;
export declare function responseBodyNamespaceIdFromJSON(jsonString: string): SafeParseResult<ResponseBodyNamespaceId, SDKValidationError>;
/** @internal */
export declare const GitAccount$inboundSchema: z.ZodType<GitAccount, z.ZodTypeDef, unknown>;
/** @internal */
export type GitAccount$Outbound = {
    provider: string;
    namespaceId: string | number | null;
};
/** @internal */
export declare const GitAccount$outboundSchema: z.ZodType<GitAccount$Outbound, z.ZodTypeDef, GitAccount>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitAccount$ {
    /** @deprecated use `GitAccount$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GitAccount, z.ZodTypeDef, unknown>;
    /** @deprecated use `GitAccount$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GitAccount$Outbound, z.ZodTypeDef, GitAccount>;
    /** @deprecated use `GitAccount$Outbound` instead. */
    type Outbound = GitAccount$Outbound;
}
export declare function gitAccountToJSON(gitAccount: GitAccount): string;
export declare function gitAccountFromJSON(jsonString: string): SafeParseResult<GitAccount, SDKValidationError>;
/** @internal */
export declare const ResponseBodyId$inboundSchema: z.ZodType<ResponseBodyId, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseBodyId$Outbound = string | number;
/** @internal */
export declare const ResponseBodyId$outboundSchema: z.ZodType<ResponseBodyId$Outbound, z.ZodTypeDef, ResponseBodyId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyId$ {
    /** @deprecated use `ResponseBodyId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBodyId, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBodyId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBodyId$Outbound, z.ZodTypeDef, ResponseBodyId>;
    /** @deprecated use `ResponseBodyId$Outbound` instead. */
    type Outbound = ResponseBodyId$Outbound;
}
export declare function responseBodyIdToJSON(responseBodyId: ResponseBodyId): string;
export declare function responseBodyIdFromJSON(jsonString: string): SafeParseResult<ResponseBodyId, SDKValidationError>;
/** @internal */
export declare const SearchRepoResponseBodyProvider$inboundSchema: z.ZodNativeEnum<typeof SearchRepoResponseBodyProvider>;
/** @internal */
export declare const SearchRepoResponseBodyProvider$outboundSchema: z.ZodNativeEnum<typeof SearchRepoResponseBodyProvider>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SearchRepoResponseBodyProvider$ {
    /** @deprecated use `SearchRepoResponseBodyProvider$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
        readonly GithubCustomHost: "github-custom-host";
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
    }>;
    /** @deprecated use `SearchRepoResponseBodyProvider$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
        readonly GithubCustomHost: "github-custom-host";
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
    }>;
}
/** @internal */
export declare const SearchRepoResponseBodyId$inboundSchema: z.ZodType<SearchRepoResponseBodyId, z.ZodTypeDef, unknown>;
/** @internal */
export type SearchRepoResponseBodyId$Outbound = string | number;
/** @internal */
export declare const SearchRepoResponseBodyId$outboundSchema: z.ZodType<SearchRepoResponseBodyId$Outbound, z.ZodTypeDef, SearchRepoResponseBodyId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SearchRepoResponseBodyId$ {
    /** @deprecated use `SearchRepoResponseBodyId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SearchRepoResponseBodyId, z.ZodTypeDef, unknown>;
    /** @deprecated use `SearchRepoResponseBodyId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SearchRepoResponseBodyId$Outbound, z.ZodTypeDef, SearchRepoResponseBodyId>;
    /** @deprecated use `SearchRepoResponseBodyId$Outbound` instead. */
    type Outbound = SearchRepoResponseBodyId$Outbound;
}
export declare function searchRepoResponseBodyIdToJSON(searchRepoResponseBodyId: SearchRepoResponseBodyId): string;
export declare function searchRepoResponseBodyIdFromJSON(jsonString: string): SafeParseResult<SearchRepoResponseBodyId, SDKValidationError>;
/** @internal */
export declare const Owner$inboundSchema: z.ZodType<Owner, z.ZodTypeDef, unknown>;
/** @internal */
export type Owner$Outbound = {
    id: string | number;
    name: string;
};
/** @internal */
export declare const Owner$outboundSchema: z.ZodType<Owner$Outbound, z.ZodTypeDef, Owner>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Owner$ {
    /** @deprecated use `Owner$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Owner, z.ZodTypeDef, unknown>;
    /** @deprecated use `Owner$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Owner$Outbound, z.ZodTypeDef, Owner>;
    /** @deprecated use `Owner$Outbound` instead. */
    type Outbound = Owner$Outbound;
}
export declare function ownerToJSON(owner: Owner): string;
export declare function ownerFromJSON(jsonString: string): SafeParseResult<Owner, SDKValidationError>;
/** @internal */
export declare const ResponseBodyOwnerType$inboundSchema: z.ZodNativeEnum<typeof ResponseBodyOwnerType>;
/** @internal */
export declare const ResponseBodyOwnerType$outboundSchema: z.ZodNativeEnum<typeof ResponseBodyOwnerType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseBodyOwnerType$ {
    /** @deprecated use `ResponseBodyOwnerType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly User: "user";
        readonly Team: "team";
    }>;
    /** @deprecated use `ResponseBodyOwnerType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly User: "user";
        readonly Team: "team";
    }>;
}
/** @internal */
export declare const Repos$inboundSchema: z.ZodType<Repos, z.ZodTypeDef, unknown>;
/** @internal */
export type Repos$Outbound = {
    id: string | number;
    provider: string;
    url: string;
    name: string;
    slug: string;
    namespace: string;
    owner: Owner$Outbound;
    ownerType: string;
    private: boolean;
    defaultBranch: string;
    updatedAt: number;
};
/** @internal */
export declare const Repos$outboundSchema: z.ZodType<Repos$Outbound, z.ZodTypeDef, Repos>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Repos$ {
    /** @deprecated use `Repos$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Repos, z.ZodTypeDef, unknown>;
    /** @deprecated use `Repos$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Repos$Outbound, z.ZodTypeDef, Repos>;
    /** @deprecated use `Repos$Outbound` instead. */
    type Outbound = Repos$Outbound;
}
export declare function reposToJSON(repos: Repos): string;
export declare function reposFromJSON(jsonString: string): SafeParseResult<Repos, SDKValidationError>;
/** @internal */
export declare const SearchRepoResponseBody2$inboundSchema: z.ZodType<SearchRepoResponseBody2, z.ZodTypeDef, unknown>;
/** @internal */
export type SearchRepoResponseBody2$Outbound = {
    gitAccount: GitAccount$Outbound;
    repos: Array<Repos$Outbound>;
};
/** @internal */
export declare const SearchRepoResponseBody2$outboundSchema: z.ZodType<SearchRepoResponseBody2$Outbound, z.ZodTypeDef, SearchRepoResponseBody2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SearchRepoResponseBody2$ {
    /** @deprecated use `SearchRepoResponseBody2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SearchRepoResponseBody2, z.ZodTypeDef, unknown>;
    /** @deprecated use `SearchRepoResponseBody2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SearchRepoResponseBody2$Outbound, z.ZodTypeDef, SearchRepoResponseBody2>;
    /** @deprecated use `SearchRepoResponseBody2$Outbound` instead. */
    type Outbound = SearchRepoResponseBody2$Outbound;
}
export declare function searchRepoResponseBody2ToJSON(searchRepoResponseBody2: SearchRepoResponseBody2): string;
export declare function searchRepoResponseBody2FromJSON(jsonString: string): SafeParseResult<SearchRepoResponseBody2, SDKValidationError>;
/** @internal */
export declare const SearchRepoResponseBody1$inboundSchema: z.ZodType<SearchRepoResponseBody1, z.ZodTypeDef, unknown>;
/** @internal */
export type SearchRepoResponseBody1$Outbound = {};
/** @internal */
export declare const SearchRepoResponseBody1$outboundSchema: z.ZodType<SearchRepoResponseBody1$Outbound, z.ZodTypeDef, SearchRepoResponseBody1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SearchRepoResponseBody1$ {
    /** @deprecated use `SearchRepoResponseBody1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SearchRepoResponseBody1, z.ZodTypeDef, unknown>;
    /** @deprecated use `SearchRepoResponseBody1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SearchRepoResponseBody1$Outbound, z.ZodTypeDef, SearchRepoResponseBody1>;
    /** @deprecated use `SearchRepoResponseBody1$Outbound` instead. */
    type Outbound = SearchRepoResponseBody1$Outbound;
}
export declare function searchRepoResponseBody1ToJSON(searchRepoResponseBody1: SearchRepoResponseBody1): string;
export declare function searchRepoResponseBody1FromJSON(jsonString: string): SafeParseResult<SearchRepoResponseBody1, SDKValidationError>;
/** @internal */
export declare const SearchRepoResponseBody$inboundSchema: z.ZodType<SearchRepoResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type SearchRepoResponseBody$Outbound = SearchRepoResponseBody1$Outbound | SearchRepoResponseBody2$Outbound;
/** @internal */
export declare const SearchRepoResponseBody$outboundSchema: z.ZodType<SearchRepoResponseBody$Outbound, z.ZodTypeDef, SearchRepoResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SearchRepoResponseBody$ {
    /** @deprecated use `SearchRepoResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SearchRepoResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `SearchRepoResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SearchRepoResponseBody$Outbound, z.ZodTypeDef, SearchRepoResponseBody>;
    /** @deprecated use `SearchRepoResponseBody$Outbound` instead. */
    type Outbound = SearchRepoResponseBody$Outbound;
}
export declare function searchRepoResponseBodyToJSON(searchRepoResponseBody: SearchRepoResponseBody): string;
export declare function searchRepoResponseBodyFromJSON(jsonString: string): SafeParseResult<SearchRepoResponseBody, SDKValidationError>;
//# sourceMappingURL=searchrepoop.d.ts.map