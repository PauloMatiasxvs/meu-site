/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
export const QueryParamProvider = {
    Github: "github",
    GithubCustomHost: "github-custom-host",
    Gitlab: "gitlab",
    Bitbucket: "bitbucket",
};
export const ResponseBodyProvider = {
    Github: "github",
    GithubCustomHost: "github-custom-host",
    Gitlab: "gitlab",
    Bitbucket: "bitbucket",
};
export const SearchRepoResponseBodyProvider = {
    Github: "github",
    GithubCustomHost: "github-custom-host",
    Gitlab: "gitlab",
    Bitbucket: "bitbucket",
};
export const ResponseBodyOwnerType = {
    User: "user",
    Team: "team",
};
/** @internal */
export const NamespaceId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const NamespaceId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var NamespaceId$;
(function (NamespaceId$) {
    /** @deprecated use `NamespaceId$inboundSchema` instead. */
    NamespaceId$.inboundSchema = NamespaceId$inboundSchema;
    /** @deprecated use `NamespaceId$outboundSchema` instead. */
    NamespaceId$.outboundSchema = NamespaceId$outboundSchema;
})(NamespaceId$ || (NamespaceId$ = {}));
export function namespaceIdToJSON(namespaceId) {
    return JSON.stringify(NamespaceId$outboundSchema.parse(namespaceId));
}
export function namespaceIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => NamespaceId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'NamespaceId' from JSON`);
}
/** @internal */
export const QueryParamProvider$inboundSchema = z.nativeEnum(QueryParamProvider);
/** @internal */
export const QueryParamProvider$outboundSchema = QueryParamProvider$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var QueryParamProvider$;
(function (QueryParamProvider$) {
    /** @deprecated use `QueryParamProvider$inboundSchema` instead. */
    QueryParamProvider$.inboundSchema = QueryParamProvider$inboundSchema;
    /** @deprecated use `QueryParamProvider$outboundSchema` instead. */
    QueryParamProvider$.outboundSchema = QueryParamProvider$outboundSchema;
})(QueryParamProvider$ || (QueryParamProvider$ = {}));
/** @internal */
export const SearchRepoRequest$inboundSchema = z.object({
    query: z.string().optional(),
    namespaceId: z.nullable(z.union([z.string(), z.number()])).optional(),
    provider: QueryParamProvider$inboundSchema.optional(),
    installationId: z.string().optional(),
    host: z.string().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const SearchRepoRequest$outboundSchema = z.object({
    query: z.string().optional(),
    namespaceId: z.nullable(z.union([z.string(), z.number()])).optional(),
    provider: QueryParamProvider$outboundSchema.optional(),
    installationId: z.string().optional(),
    host: z.string().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SearchRepoRequest$;
(function (SearchRepoRequest$) {
    /** @deprecated use `SearchRepoRequest$inboundSchema` instead. */
    SearchRepoRequest$.inboundSchema = SearchRepoRequest$inboundSchema;
    /** @deprecated use `SearchRepoRequest$outboundSchema` instead. */
    SearchRepoRequest$.outboundSchema = SearchRepoRequest$outboundSchema;
})(SearchRepoRequest$ || (SearchRepoRequest$ = {}));
export function searchRepoRequestToJSON(searchRepoRequest) {
    return JSON.stringify(SearchRepoRequest$outboundSchema.parse(searchRepoRequest));
}
export function searchRepoRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SearchRepoRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SearchRepoRequest' from JSON`);
}
/** @internal */
export const ResponseBodyProvider$inboundSchema = z.nativeEnum(ResponseBodyProvider);
/** @internal */
export const ResponseBodyProvider$outboundSchema = ResponseBodyProvider$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyProvider$;
(function (ResponseBodyProvider$) {
    /** @deprecated use `ResponseBodyProvider$inboundSchema` instead. */
    ResponseBodyProvider$.inboundSchema = ResponseBodyProvider$inboundSchema;
    /** @deprecated use `ResponseBodyProvider$outboundSchema` instead. */
    ResponseBodyProvider$.outboundSchema = ResponseBodyProvider$outboundSchema;
})(ResponseBodyProvider$ || (ResponseBodyProvider$ = {}));
/** @internal */
export const ResponseBodyNamespaceId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const ResponseBodyNamespaceId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyNamespaceId$;
(function (ResponseBodyNamespaceId$) {
    /** @deprecated use `ResponseBodyNamespaceId$inboundSchema` instead. */
    ResponseBodyNamespaceId$.inboundSchema = ResponseBodyNamespaceId$inboundSchema;
    /** @deprecated use `ResponseBodyNamespaceId$outboundSchema` instead. */
    ResponseBodyNamespaceId$.outboundSchema = ResponseBodyNamespaceId$outboundSchema;
})(ResponseBodyNamespaceId$ || (ResponseBodyNamespaceId$ = {}));
export function responseBodyNamespaceIdToJSON(responseBodyNamespaceId) {
    return JSON.stringify(ResponseBodyNamespaceId$outboundSchema.parse(responseBodyNamespaceId));
}
export function responseBodyNamespaceIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyNamespaceId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyNamespaceId' from JSON`);
}
/** @internal */
export const GitAccount$inboundSchema = z.object({
    provider: ResponseBodyProvider$inboundSchema,
    namespaceId: z.nullable(z.union([z.string(), z.number()])),
});
/** @internal */
export const GitAccount$outboundSchema = z.object({
    provider: ResponseBodyProvider$outboundSchema,
    namespaceId: z.nullable(z.union([z.string(), z.number()])),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GitAccount$;
(function (GitAccount$) {
    /** @deprecated use `GitAccount$inboundSchema` instead. */
    GitAccount$.inboundSchema = GitAccount$inboundSchema;
    /** @deprecated use `GitAccount$outboundSchema` instead. */
    GitAccount$.outboundSchema = GitAccount$outboundSchema;
})(GitAccount$ || (GitAccount$ = {}));
export function gitAccountToJSON(gitAccount) {
    return JSON.stringify(GitAccount$outboundSchema.parse(gitAccount));
}
export function gitAccountFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GitAccount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GitAccount' from JSON`);
}
/** @internal */
export const ResponseBodyId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const ResponseBodyId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyId$;
(function (ResponseBodyId$) {
    /** @deprecated use `ResponseBodyId$inboundSchema` instead. */
    ResponseBodyId$.inboundSchema = ResponseBodyId$inboundSchema;
    /** @deprecated use `ResponseBodyId$outboundSchema` instead. */
    ResponseBodyId$.outboundSchema = ResponseBodyId$outboundSchema;
})(ResponseBodyId$ || (ResponseBodyId$ = {}));
export function responseBodyIdToJSON(responseBodyId) {
    return JSON.stringify(ResponseBodyId$outboundSchema.parse(responseBodyId));
}
export function responseBodyIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ResponseBodyId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseBodyId' from JSON`);
}
/** @internal */
export const SearchRepoResponseBodyProvider$inboundSchema = z.nativeEnum(SearchRepoResponseBodyProvider);
/** @internal */
export const SearchRepoResponseBodyProvider$outboundSchema = SearchRepoResponseBodyProvider$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SearchRepoResponseBodyProvider$;
(function (SearchRepoResponseBodyProvider$) {
    /** @deprecated use `SearchRepoResponseBodyProvider$inboundSchema` instead. */
    SearchRepoResponseBodyProvider$.inboundSchema = SearchRepoResponseBodyProvider$inboundSchema;
    /** @deprecated use `SearchRepoResponseBodyProvider$outboundSchema` instead. */
    SearchRepoResponseBodyProvider$.outboundSchema = SearchRepoResponseBodyProvider$outboundSchema;
})(SearchRepoResponseBodyProvider$ || (SearchRepoResponseBodyProvider$ = {}));
/** @internal */
export const SearchRepoResponseBodyId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const SearchRepoResponseBodyId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SearchRepoResponseBodyId$;
(function (SearchRepoResponseBodyId$) {
    /** @deprecated use `SearchRepoResponseBodyId$inboundSchema` instead. */
    SearchRepoResponseBodyId$.inboundSchema = SearchRepoResponseBodyId$inboundSchema;
    /** @deprecated use `SearchRepoResponseBodyId$outboundSchema` instead. */
    SearchRepoResponseBodyId$.outboundSchema = SearchRepoResponseBodyId$outboundSchema;
})(SearchRepoResponseBodyId$ || (SearchRepoResponseBodyId$ = {}));
export function searchRepoResponseBodyIdToJSON(searchRepoResponseBodyId) {
    return JSON.stringify(SearchRepoResponseBodyId$outboundSchema.parse(searchRepoResponseBodyId));
}
export function searchRepoResponseBodyIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SearchRepoResponseBodyId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SearchRepoResponseBodyId' from JSON`);
}
/** @internal */
export const Owner$inboundSchema = z
    .object({
    id: z.union([z.string(), z.number()]),
    name: z.string(),
});
/** @internal */
export const Owner$outboundSchema = z.object({
    id: z.union([z.string(), z.number()]),
    name: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Owner$;
(function (Owner$) {
    /** @deprecated use `Owner$inboundSchema` instead. */
    Owner$.inboundSchema = Owner$inboundSchema;
    /** @deprecated use `Owner$outboundSchema` instead. */
    Owner$.outboundSchema = Owner$outboundSchema;
})(Owner$ || (Owner$ = {}));
export function ownerToJSON(owner) {
    return JSON.stringify(Owner$outboundSchema.parse(owner));
}
export function ownerFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Owner$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Owner' from JSON`);
}
/** @internal */
export const ResponseBodyOwnerType$inboundSchema = z.nativeEnum(ResponseBodyOwnerType);
/** @internal */
export const ResponseBodyOwnerType$outboundSchema = ResponseBodyOwnerType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ResponseBodyOwnerType$;
(function (ResponseBodyOwnerType$) {
    /** @deprecated use `ResponseBodyOwnerType$inboundSchema` instead. */
    ResponseBodyOwnerType$.inboundSchema = ResponseBodyOwnerType$inboundSchema;
    /** @deprecated use `ResponseBodyOwnerType$outboundSchema` instead. */
    ResponseBodyOwnerType$.outboundSchema = ResponseBodyOwnerType$outboundSchema;
})(ResponseBodyOwnerType$ || (ResponseBodyOwnerType$ = {}));
/** @internal */
export const Repos$inboundSchema = z
    .object({
    id: z.union([z.string(), z.number()]),
    provider: SearchRepoResponseBodyProvider$inboundSchema,
    url: z.string(),
    name: z.string(),
    slug: z.string(),
    namespace: z.string(),
    owner: z.lazy(() => Owner$inboundSchema),
    ownerType: ResponseBodyOwnerType$inboundSchema,
    private: z.boolean(),
    defaultBranch: z.string(),
    updatedAt: z.number(),
});
/** @internal */
export const Repos$outboundSchema = z.object({
    id: z.union([z.string(), z.number()]),
    provider: SearchRepoResponseBodyProvider$outboundSchema,
    url: z.string(),
    name: z.string(),
    slug: z.string(),
    namespace: z.string(),
    owner: z.lazy(() => Owner$outboundSchema),
    ownerType: ResponseBodyOwnerType$outboundSchema,
    private: z.boolean(),
    defaultBranch: z.string(),
    updatedAt: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Repos$;
(function (Repos$) {
    /** @deprecated use `Repos$inboundSchema` instead. */
    Repos$.inboundSchema = Repos$inboundSchema;
    /** @deprecated use `Repos$outboundSchema` instead. */
    Repos$.outboundSchema = Repos$outboundSchema;
})(Repos$ || (Repos$ = {}));
export function reposToJSON(repos) {
    return JSON.stringify(Repos$outboundSchema.parse(repos));
}
export function reposFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Repos$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Repos' from JSON`);
}
/** @internal */
export const SearchRepoResponseBody2$inboundSchema = z.object({
    gitAccount: z.lazy(() => GitAccount$inboundSchema),
    repos: z.array(z.lazy(() => Repos$inboundSchema)),
});
/** @internal */
export const SearchRepoResponseBody2$outboundSchema = z.object({
    gitAccount: z.lazy(() => GitAccount$outboundSchema),
    repos: z.array(z.lazy(() => Repos$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SearchRepoResponseBody2$;
(function (SearchRepoResponseBody2$) {
    /** @deprecated use `SearchRepoResponseBody2$inboundSchema` instead. */
    SearchRepoResponseBody2$.inboundSchema = SearchRepoResponseBody2$inboundSchema;
    /** @deprecated use `SearchRepoResponseBody2$outboundSchema` instead. */
    SearchRepoResponseBody2$.outboundSchema = SearchRepoResponseBody2$outboundSchema;
})(SearchRepoResponseBody2$ || (SearchRepoResponseBody2$ = {}));
export function searchRepoResponseBody2ToJSON(searchRepoResponseBody2) {
    return JSON.stringify(SearchRepoResponseBody2$outboundSchema.parse(searchRepoResponseBody2));
}
export function searchRepoResponseBody2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => SearchRepoResponseBody2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SearchRepoResponseBody2' from JSON`);
}
/** @internal */
export const SearchRepoResponseBody1$inboundSchema = z.object({});
/** @internal */
export const SearchRepoResponseBody1$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SearchRepoResponseBody1$;
(function (SearchRepoResponseBody1$) {
    /** @deprecated use `SearchRepoResponseBody1$inboundSchema` instead. */
    SearchRepoResponseBody1$.inboundSchema = SearchRepoResponseBody1$inboundSchema;
    /** @deprecated use `SearchRepoResponseBody1$outboundSchema` instead. */
    SearchRepoResponseBody1$.outboundSchema = SearchRepoResponseBody1$outboundSchema;
})(SearchRepoResponseBody1$ || (SearchRepoResponseBody1$ = {}));
export function searchRepoResponseBody1ToJSON(searchRepoResponseBody1) {
    return JSON.stringify(SearchRepoResponseBody1$outboundSchema.parse(searchRepoResponseBody1));
}
export function searchRepoResponseBody1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => SearchRepoResponseBody1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SearchRepoResponseBody1' from JSON`);
}
/** @internal */
export const SearchRepoResponseBody$inboundSchema = z.union([
    z.lazy(() => SearchRepoResponseBody1$inboundSchema),
    z.lazy(() => SearchRepoResponseBody2$inboundSchema),
]);
/** @internal */
export const SearchRepoResponseBody$outboundSchema = z.union([
    z.lazy(() => SearchRepoResponseBody1$outboundSchema),
    z.lazy(() => SearchRepoResponseBody2$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SearchRepoResponseBody$;
(function (SearchRepoResponseBody$) {
    /** @deprecated use `SearchRepoResponseBody$inboundSchema` instead. */
    SearchRepoResponseBody$.inboundSchema = SearchRepoResponseBody$inboundSchema;
    /** @deprecated use `SearchRepoResponseBody$outboundSchema` instead. */
    SearchRepoResponseBody$.outboundSchema = SearchRepoResponseBody$outboundSchema;
})(SearchRepoResponseBody$ || (SearchRepoResponseBody$ = {}));
export function searchRepoResponseBodyToJSON(searchRepoResponseBody) {
    return JSON.stringify(SearchRepoResponseBody$outboundSchema.parse(searchRepoResponseBody));
}
export function searchRepoResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SearchRepoResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SearchRepoResponseBody' from JSON`);
}
//# sourceMappingURL=searchrepoop.js.map