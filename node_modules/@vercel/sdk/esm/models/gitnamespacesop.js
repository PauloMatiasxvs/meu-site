/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
export const Provider = {
    Github: "github",
    GithubCustomHost: "github-custom-host",
    Gitlab: "gitlab",
    Bitbucket: "bitbucket",
};
/** @internal */
export const Provider$inboundSchema = z
    .nativeEnum(Provider);
/** @internal */
export const Provider$outboundSchema = Provider$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Provider$;
(function (Provider$) {
    /** @deprecated use `Provider$inboundSchema` instead. */
    Provider$.inboundSchema = Provider$inboundSchema;
    /** @deprecated use `Provider$outboundSchema` instead. */
    Provider$.outboundSchema = Provider$outboundSchema;
})(Provider$ || (Provider$ = {}));
/** @internal */
export const GitNamespacesRequest$inboundSchema = z.object({
    host: z.string().optional(),
    provider: Provider$inboundSchema.optional(),
});
/** @internal */
export const GitNamespacesRequest$outboundSchema = z.object({
    host: z.string().optional(),
    provider: Provider$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GitNamespacesRequest$;
(function (GitNamespacesRequest$) {
    /** @deprecated use `GitNamespacesRequest$inboundSchema` instead. */
    GitNamespacesRequest$.inboundSchema = GitNamespacesRequest$inboundSchema;
    /** @deprecated use `GitNamespacesRequest$outboundSchema` instead. */
    GitNamespacesRequest$.outboundSchema = GitNamespacesRequest$outboundSchema;
})(GitNamespacesRequest$ || (GitNamespacesRequest$ = {}));
export function gitNamespacesRequestToJSON(gitNamespacesRequest) {
    return JSON.stringify(GitNamespacesRequest$outboundSchema.parse(gitNamespacesRequest));
}
export function gitNamespacesRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GitNamespacesRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GitNamespacesRequest' from JSON`);
}
/** @internal */
export const GitNamespacesId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const GitNamespacesId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GitNamespacesId$;
(function (GitNamespacesId$) {
    /** @deprecated use `GitNamespacesId$inboundSchema` instead. */
    GitNamespacesId$.inboundSchema = GitNamespacesId$inboundSchema;
    /** @deprecated use `GitNamespacesId$outboundSchema` instead. */
    GitNamespacesId$.outboundSchema = GitNamespacesId$outboundSchema;
})(GitNamespacesId$ || (GitNamespacesId$ = {}));
export function gitNamespacesIdToJSON(gitNamespacesId) {
    return JSON.stringify(GitNamespacesId$outboundSchema.parse(gitNamespacesId));
}
export function gitNamespacesIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GitNamespacesId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GitNamespacesId' from JSON`);
}
/** @internal */
export const GitNamespacesResponseBody$inboundSchema = z.object({
    provider: z.string(),
    slug: z.string(),
    id: z.union([z.string(), z.number()]),
    ownerType: z.string(),
    name: z.string().optional(),
    isAccessRestricted: z.boolean().optional(),
    installationId: z.number().optional(),
    requireReauth: z.boolean().optional(),
});
/** @internal */
export const GitNamespacesResponseBody$outboundSchema = z.object({
    provider: z.string(),
    slug: z.string(),
    id: z.union([z.string(), z.number()]),
    ownerType: z.string(),
    name: z.string().optional(),
    isAccessRestricted: z.boolean().optional(),
    installationId: z.number().optional(),
    requireReauth: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GitNamespacesResponseBody$;
(function (GitNamespacesResponseBody$) {
    /** @deprecated use `GitNamespacesResponseBody$inboundSchema` instead. */
    GitNamespacesResponseBody$.inboundSchema = GitNamespacesResponseBody$inboundSchema;
    /** @deprecated use `GitNamespacesResponseBody$outboundSchema` instead. */
    GitNamespacesResponseBody$.outboundSchema = GitNamespacesResponseBody$outboundSchema;
})(GitNamespacesResponseBody$ || (GitNamespacesResponseBody$ = {}));
export function gitNamespacesResponseBodyToJSON(gitNamespacesResponseBody) {
    return JSON.stringify(GitNamespacesResponseBody$outboundSchema.parse(gitNamespacesResponseBody));
}
export function gitNamespacesResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GitNamespacesResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GitNamespacesResponseBody' from JSON`);
}
//# sourceMappingURL=gitnamespacesop.js.map