import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export declare const Provider: {
    readonly Github: "github";
    readonly GithubCustomHost: "github-custom-host";
    readonly Gitlab: "gitlab";
    readonly Bitbucket: "bitbucket";
};
export type Provider = ClosedEnum<typeof Provider>;
export type GitNamespacesRequest = {
    /**
     * The custom Git host if using a custom Git provider, like GitHub Enterprise Server
     */
    host?: string | undefined;
    provider?: Provider | undefined;
};
export type GitNamespacesId = string | number;
export type GitNamespacesResponseBody = {
    provider: string;
    slug: string;
    id: string | number;
    ownerType: string;
    name?: string | undefined;
    isAccessRestricted?: boolean | undefined;
    installationId?: number | undefined;
    requireReauth?: boolean | undefined;
};
/** @internal */
export declare const Provider$inboundSchema: z.ZodNativeEnum<typeof Provider>;
/** @internal */
export declare const Provider$outboundSchema: z.ZodNativeEnum<typeof Provider>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Provider$ {
    /** @deprecated use `Provider$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
        readonly GithubCustomHost: "github-custom-host";
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
    }>;
    /** @deprecated use `Provider$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Github: "github";
        readonly GithubCustomHost: "github-custom-host";
        readonly Gitlab: "gitlab";
        readonly Bitbucket: "bitbucket";
    }>;
}
/** @internal */
export declare const GitNamespacesRequest$inboundSchema: z.ZodType<GitNamespacesRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GitNamespacesRequest$Outbound = {
    host?: string | undefined;
    provider?: string | undefined;
};
/** @internal */
export declare const GitNamespacesRequest$outboundSchema: z.ZodType<GitNamespacesRequest$Outbound, z.ZodTypeDef, GitNamespacesRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitNamespacesRequest$ {
    /** @deprecated use `GitNamespacesRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GitNamespacesRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GitNamespacesRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GitNamespacesRequest$Outbound, z.ZodTypeDef, GitNamespacesRequest>;
    /** @deprecated use `GitNamespacesRequest$Outbound` instead. */
    type Outbound = GitNamespacesRequest$Outbound;
}
export declare function gitNamespacesRequestToJSON(gitNamespacesRequest: GitNamespacesRequest): string;
export declare function gitNamespacesRequestFromJSON(jsonString: string): SafeParseResult<GitNamespacesRequest, SDKValidationError>;
/** @internal */
export declare const GitNamespacesId$inboundSchema: z.ZodType<GitNamespacesId, z.ZodTypeDef, unknown>;
/** @internal */
export type GitNamespacesId$Outbound = string | number;
/** @internal */
export declare const GitNamespacesId$outboundSchema: z.ZodType<GitNamespacesId$Outbound, z.ZodTypeDef, GitNamespacesId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitNamespacesId$ {
    /** @deprecated use `GitNamespacesId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GitNamespacesId, z.ZodTypeDef, unknown>;
    /** @deprecated use `GitNamespacesId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GitNamespacesId$Outbound, z.ZodTypeDef, GitNamespacesId>;
    /** @deprecated use `GitNamespacesId$Outbound` instead. */
    type Outbound = GitNamespacesId$Outbound;
}
export declare function gitNamespacesIdToJSON(gitNamespacesId: GitNamespacesId): string;
export declare function gitNamespacesIdFromJSON(jsonString: string): SafeParseResult<GitNamespacesId, SDKValidationError>;
/** @internal */
export declare const GitNamespacesResponseBody$inboundSchema: z.ZodType<GitNamespacesResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type GitNamespacesResponseBody$Outbound = {
    provider: string;
    slug: string;
    id: string | number;
    ownerType: string;
    name?: string | undefined;
    isAccessRestricted?: boolean | undefined;
    installationId?: number | undefined;
    requireReauth?: boolean | undefined;
};
/** @internal */
export declare const GitNamespacesResponseBody$outboundSchema: z.ZodType<GitNamespacesResponseBody$Outbound, z.ZodTypeDef, GitNamespacesResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GitNamespacesResponseBody$ {
    /** @deprecated use `GitNamespacesResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GitNamespacesResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `GitNamespacesResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GitNamespacesResponseBody$Outbound, z.ZodTypeDef, GitNamespacesResponseBody>;
    /** @deprecated use `GitNamespacesResponseBody$Outbound` instead. */
    type Outbound = GitNamespacesResponseBody$Outbound;
}
export declare function gitNamespacesResponseBodyToJSON(gitNamespacesResponseBody: GitNamespacesResponseBody): string;
export declare function gitNamespacesResponseBodyFromJSON(jsonString: string): SafeParseResult<GitNamespacesResponseBody, SDKValidationError>;
//# sourceMappingURL=gitnamespacesop.d.ts.map