/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { AuthUser$inboundSchema, AuthUser$outboundSchema, } from "./authuser.js";
import { AuthUserLimited$inboundSchema, AuthUserLimited$outboundSchema, } from "./authuserlimited.js";
/** @internal */
export const User$inboundSchema = z
    .union([AuthUserLimited$inboundSchema, AuthUser$inboundSchema]);
/** @internal */
export const User$outboundSchema = z.union([AuthUserLimited$outboundSchema, AuthUser$outboundSchema]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var User$;
(function (User$) {
    /** @deprecated use `User$inboundSchema` instead. */
    User$.inboundSchema = User$inboundSchema;
    /** @deprecated use `User$outboundSchema` instead. */
    User$.outboundSchema = User$outboundSchema;
})(User$ || (User$ = {}));
export function userToJSON(user) {
    return JSON.stringify(User$outboundSchema.parse(user));
}
export function userFromJSON(jsonString) {
    return safeParse(jsonString, (x) => User$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'User' from JSON`);
}
/** @internal */
export const GetAuthUserResponseBody$inboundSchema = z.object({
    user: z.union([AuthUserLimited$inboundSchema, AuthUser$inboundSchema]),
});
/** @internal */
export const GetAuthUserResponseBody$outboundSchema = z.object({
    user: z.union([AuthUserLimited$outboundSchema, AuthUser$outboundSchema]),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetAuthUserResponseBody$;
(function (GetAuthUserResponseBody$) {
    /** @deprecated use `GetAuthUserResponseBody$inboundSchema` instead. */
    GetAuthUserResponseBody$.inboundSchema = GetAuthUserResponseBody$inboundSchema;
    /** @deprecated use `GetAuthUserResponseBody$outboundSchema` instead. */
    GetAuthUserResponseBody$.outboundSchema = GetAuthUserResponseBody$outboundSchema;
})(GetAuthUserResponseBody$ || (GetAuthUserResponseBody$ = {}));
export function getAuthUserResponseBodyToJSON(getAuthUserResponseBody) {
    return JSON.stringify(GetAuthUserResponseBody$outboundSchema.parse(getAuthUserResponseBody));
}
export function getAuthUserResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetAuthUserResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetAuthUserResponseBody' from JSON`);
}
//# sourceMappingURL=getauthuserop.js.map