/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
export const GetConfigurableLogDrainDeliveryFormat = {
    Json: "json",
    Ndjson: "ndjson",
    Syslog: "syslog",
};
export const GetConfigurableLogDrainSources = {
    Build: "build",
    Edge: "edge",
    Lambda: "lambda",
    Static: "static",
    External: "external",
    Firewall: "firewall",
};
export const GetConfigurableLogDrainEnvironments = {
    Production: "production",
    Preview: "preview",
};
export const GetConfigurableLogDrainStatus = {
    Enabled: "enabled",
    Disabled: "disabled",
    Errored: "errored",
};
export const DisabledReason = {
    DisabledByOwner: "disabled-by-owner",
    FeatureNotAvailable: "feature-not-available",
    AccountPlanDowngrade: "account-plan-downgrade",
    DisabledByAdmin: "disabled-by-admin",
};
export const GetConfigurableLogDrainCreatedFrom = {
    SelfServed: "self-served",
};
/** @internal */
export const GetConfigurableLogDrainRequest$inboundSchema = z.object({
    id: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const GetConfigurableLogDrainRequest$outboundSchema = z.object({
    id: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetConfigurableLogDrainRequest$;
(function (GetConfigurableLogDrainRequest$) {
    /** @deprecated use `GetConfigurableLogDrainRequest$inboundSchema` instead. */
    GetConfigurableLogDrainRequest$.inboundSchema = GetConfigurableLogDrainRequest$inboundSchema;
    /** @deprecated use `GetConfigurableLogDrainRequest$outboundSchema` instead. */
    GetConfigurableLogDrainRequest$.outboundSchema = GetConfigurableLogDrainRequest$outboundSchema;
})(GetConfigurableLogDrainRequest$ || (GetConfigurableLogDrainRequest$ = {}));
export function getConfigurableLogDrainRequestToJSON(getConfigurableLogDrainRequest) {
    return JSON.stringify(GetConfigurableLogDrainRequest$outboundSchema.parse(getConfigurableLogDrainRequest));
}
export function getConfigurableLogDrainRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetConfigurableLogDrainRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetConfigurableLogDrainRequest' from JSON`);
}
/** @internal */
export const GetConfigurableLogDrainDeliveryFormat$inboundSchema = z.nativeEnum(GetConfigurableLogDrainDeliveryFormat);
/** @internal */
export const GetConfigurableLogDrainDeliveryFormat$outboundSchema = GetConfigurableLogDrainDeliveryFormat$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetConfigurableLogDrainDeliveryFormat$;
(function (GetConfigurableLogDrainDeliveryFormat$) {
    /** @deprecated use `GetConfigurableLogDrainDeliveryFormat$inboundSchema` instead. */
    GetConfigurableLogDrainDeliveryFormat$.inboundSchema = GetConfigurableLogDrainDeliveryFormat$inboundSchema;
    /** @deprecated use `GetConfigurableLogDrainDeliveryFormat$outboundSchema` instead. */
    GetConfigurableLogDrainDeliveryFormat$.outboundSchema = GetConfigurableLogDrainDeliveryFormat$outboundSchema;
})(GetConfigurableLogDrainDeliveryFormat$ || (GetConfigurableLogDrainDeliveryFormat$ = {}));
/** @internal */
export const GetConfigurableLogDrainSources$inboundSchema = z.nativeEnum(GetConfigurableLogDrainSources);
/** @internal */
export const GetConfigurableLogDrainSources$outboundSchema = GetConfigurableLogDrainSources$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetConfigurableLogDrainSources$;
(function (GetConfigurableLogDrainSources$) {
    /** @deprecated use `GetConfigurableLogDrainSources$inboundSchema` instead. */
    GetConfigurableLogDrainSources$.inboundSchema = GetConfigurableLogDrainSources$inboundSchema;
    /** @deprecated use `GetConfigurableLogDrainSources$outboundSchema` instead. */
    GetConfigurableLogDrainSources$.outboundSchema = GetConfigurableLogDrainSources$outboundSchema;
})(GetConfigurableLogDrainSources$ || (GetConfigurableLogDrainSources$ = {}));
/** @internal */
export const GetConfigurableLogDrainEnvironments$inboundSchema = z.nativeEnum(GetConfigurableLogDrainEnvironments);
/** @internal */
export const GetConfigurableLogDrainEnvironments$outboundSchema = GetConfigurableLogDrainEnvironments$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetConfigurableLogDrainEnvironments$;
(function (GetConfigurableLogDrainEnvironments$) {
    /** @deprecated use `GetConfigurableLogDrainEnvironments$inboundSchema` instead. */
    GetConfigurableLogDrainEnvironments$.inboundSchema = GetConfigurableLogDrainEnvironments$inboundSchema;
    /** @deprecated use `GetConfigurableLogDrainEnvironments$outboundSchema` instead. */
    GetConfigurableLogDrainEnvironments$.outboundSchema = GetConfigurableLogDrainEnvironments$outboundSchema;
})(GetConfigurableLogDrainEnvironments$ || (GetConfigurableLogDrainEnvironments$ = {}));
/** @internal */
export const GetConfigurableLogDrainStatus$inboundSchema = z.nativeEnum(GetConfigurableLogDrainStatus);
/** @internal */
export const GetConfigurableLogDrainStatus$outboundSchema = GetConfigurableLogDrainStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetConfigurableLogDrainStatus$;
(function (GetConfigurableLogDrainStatus$) {
    /** @deprecated use `GetConfigurableLogDrainStatus$inboundSchema` instead. */
    GetConfigurableLogDrainStatus$.inboundSchema = GetConfigurableLogDrainStatus$inboundSchema;
    /** @deprecated use `GetConfigurableLogDrainStatus$outboundSchema` instead. */
    GetConfigurableLogDrainStatus$.outboundSchema = GetConfigurableLogDrainStatus$outboundSchema;
})(GetConfigurableLogDrainStatus$ || (GetConfigurableLogDrainStatus$ = {}));
/** @internal */
export const DisabledReason$inboundSchema = z.nativeEnum(DisabledReason);
/** @internal */
export const DisabledReason$outboundSchema = DisabledReason$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DisabledReason$;
(function (DisabledReason$) {
    /** @deprecated use `DisabledReason$inboundSchema` instead. */
    DisabledReason$.inboundSchema = DisabledReason$inboundSchema;
    /** @deprecated use `DisabledReason$outboundSchema` instead. */
    DisabledReason$.outboundSchema = DisabledReason$outboundSchema;
})(DisabledReason$ || (DisabledReason$ = {}));
/** @internal */
export const GetConfigurableLogDrainCreatedFrom$inboundSchema = z.nativeEnum(GetConfigurableLogDrainCreatedFrom);
/** @internal */
export const GetConfigurableLogDrainCreatedFrom$outboundSchema = GetConfigurableLogDrainCreatedFrom$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetConfigurableLogDrainCreatedFrom$;
(function (GetConfigurableLogDrainCreatedFrom$) {
    /** @deprecated use `GetConfigurableLogDrainCreatedFrom$inboundSchema` instead. */
    GetConfigurableLogDrainCreatedFrom$.inboundSchema = GetConfigurableLogDrainCreatedFrom$inboundSchema;
    /** @deprecated use `GetConfigurableLogDrainCreatedFrom$outboundSchema` instead. */
    GetConfigurableLogDrainCreatedFrom$.outboundSchema = GetConfigurableLogDrainCreatedFrom$outboundSchema;
})(GetConfigurableLogDrainCreatedFrom$ || (GetConfigurableLogDrainCreatedFrom$ = {}));
/** @internal */
export const GetConfigurableLogDrainResponseBody$inboundSchema = z.object({
    id: z.string(),
    deliveryFormat: GetConfigurableLogDrainDeliveryFormat$inboundSchema,
    url: z.string(),
    name: z.string(),
    clientId: z.string().optional(),
    configurationId: z.string().optional(),
    teamId: z.nullable(z.string()).optional(),
    ownerId: z.string(),
    projectIds: z.array(z.string()).optional(),
    createdAt: z.number(),
    deletedAt: z.nullable(z.number()),
    updatedAt: z.number(),
    sources: z.array(GetConfigurableLogDrainSources$inboundSchema).optional(),
    headers: z.record(z.string()).optional(),
    environments: z.array(GetConfigurableLogDrainEnvironments$inboundSchema),
    status: GetConfigurableLogDrainStatus$inboundSchema.optional(),
    disabledAt: z.number().optional(),
    disabledReason: DisabledReason$inboundSchema.optional(),
    disabledBy: z.string().optional(),
    firstErrorTimestamp: z.number().optional(),
    samplingRate: z.number().optional(),
    hideIpAddresses: z.boolean().optional(),
    secret: z.string(),
    createdFrom: GetConfigurableLogDrainCreatedFrom$inboundSchema.optional(),
});
/** @internal */
export const GetConfigurableLogDrainResponseBody$outboundSchema = z.object({
    id: z.string(),
    deliveryFormat: GetConfigurableLogDrainDeliveryFormat$outboundSchema,
    url: z.string(),
    name: z.string(),
    clientId: z.string().optional(),
    configurationId: z.string().optional(),
    teamId: z.nullable(z.string()).optional(),
    ownerId: z.string(),
    projectIds: z.array(z.string()).optional(),
    createdAt: z.number(),
    deletedAt: z.nullable(z.number()),
    updatedAt: z.number(),
    sources: z.array(GetConfigurableLogDrainSources$outboundSchema).optional(),
    headers: z.record(z.string()).optional(),
    environments: z.array(GetConfigurableLogDrainEnvironments$outboundSchema),
    status: GetConfigurableLogDrainStatus$outboundSchema.optional(),
    disabledAt: z.number().optional(),
    disabledReason: DisabledReason$outboundSchema.optional(),
    disabledBy: z.string().optional(),
    firstErrorTimestamp: z.number().optional(),
    samplingRate: z.number().optional(),
    hideIpAddresses: z.boolean().optional(),
    secret: z.string(),
    createdFrom: GetConfigurableLogDrainCreatedFrom$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetConfigurableLogDrainResponseBody$;
(function (GetConfigurableLogDrainResponseBody$) {
    /** @deprecated use `GetConfigurableLogDrainResponseBody$inboundSchema` instead. */
    GetConfigurableLogDrainResponseBody$.inboundSchema = GetConfigurableLogDrainResponseBody$inboundSchema;
    /** @deprecated use `GetConfigurableLogDrainResponseBody$outboundSchema` instead. */
    GetConfigurableLogDrainResponseBody$.outboundSchema = GetConfigurableLogDrainResponseBody$outboundSchema;
})(GetConfigurableLogDrainResponseBody$ || (GetConfigurableLogDrainResponseBody$ = {}));
export function getConfigurableLogDrainResponseBodyToJSON(getConfigurableLogDrainResponseBody) {
    return JSON.stringify(GetConfigurableLogDrainResponseBody$outboundSchema.parse(getConfigurableLogDrainResponseBody));
}
export function getConfigurableLogDrainResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetConfigurableLogDrainResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetConfigurableLogDrainResponseBody' from JSON`);
}
//# sourceMappingURL=getconfigurablelogdrainop.js.map