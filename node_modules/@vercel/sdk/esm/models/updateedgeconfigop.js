/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
export const UpdateEdgeConfigType = {
    Flags: "flags",
};
/** @internal */
export const UpdateEdgeConfigRequestBody$inboundSchema = z.object({
    slug: z.string(),
});
/** @internal */
export const UpdateEdgeConfigRequestBody$outboundSchema = z.object({
    slug: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateEdgeConfigRequestBody$;
(function (UpdateEdgeConfigRequestBody$) {
    /** @deprecated use `UpdateEdgeConfigRequestBody$inboundSchema` instead. */
    UpdateEdgeConfigRequestBody$.inboundSchema = UpdateEdgeConfigRequestBody$inboundSchema;
    /** @deprecated use `UpdateEdgeConfigRequestBody$outboundSchema` instead. */
    UpdateEdgeConfigRequestBody$.outboundSchema = UpdateEdgeConfigRequestBody$outboundSchema;
})(UpdateEdgeConfigRequestBody$ || (UpdateEdgeConfigRequestBody$ = {}));
export function updateEdgeConfigRequestBodyToJSON(updateEdgeConfigRequestBody) {
    return JSON.stringify(UpdateEdgeConfigRequestBody$outboundSchema.parse(updateEdgeConfigRequestBody));
}
export function updateEdgeConfigRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateEdgeConfigRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateEdgeConfigRequestBody' from JSON`);
}
/** @internal */
export const UpdateEdgeConfigRequest$inboundSchema = z.object({
    edgeConfigId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => UpdateEdgeConfigRequestBody$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const UpdateEdgeConfigRequest$outboundSchema = z.object({
    edgeConfigId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => UpdateEdgeConfigRequestBody$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateEdgeConfigRequest$;
(function (UpdateEdgeConfigRequest$) {
    /** @deprecated use `UpdateEdgeConfigRequest$inboundSchema` instead. */
    UpdateEdgeConfigRequest$.inboundSchema = UpdateEdgeConfigRequest$inboundSchema;
    /** @deprecated use `UpdateEdgeConfigRequest$outboundSchema` instead. */
    UpdateEdgeConfigRequest$.outboundSchema = UpdateEdgeConfigRequest$outboundSchema;
})(UpdateEdgeConfigRequest$ || (UpdateEdgeConfigRequest$ = {}));
export function updateEdgeConfigRequestToJSON(updateEdgeConfigRequest) {
    return JSON.stringify(UpdateEdgeConfigRequest$outboundSchema.parse(updateEdgeConfigRequest));
}
export function updateEdgeConfigRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateEdgeConfigRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateEdgeConfigRequest' from JSON`);
}
/** @internal */
export const UpdateEdgeConfigTransfer$inboundSchema = z.object({
    fromAccountId: z.string(),
    startedAt: z.number(),
    doneAt: z.nullable(z.number()),
});
/** @internal */
export const UpdateEdgeConfigTransfer$outboundSchema = z.object({
    fromAccountId: z.string(),
    startedAt: z.number(),
    doneAt: z.nullable(z.number()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateEdgeConfigTransfer$;
(function (UpdateEdgeConfigTransfer$) {
    /** @deprecated use `UpdateEdgeConfigTransfer$inboundSchema` instead. */
    UpdateEdgeConfigTransfer$.inboundSchema = UpdateEdgeConfigTransfer$inboundSchema;
    /** @deprecated use `UpdateEdgeConfigTransfer$outboundSchema` instead. */
    UpdateEdgeConfigTransfer$.outboundSchema = UpdateEdgeConfigTransfer$outboundSchema;
})(UpdateEdgeConfigTransfer$ || (UpdateEdgeConfigTransfer$ = {}));
export function updateEdgeConfigTransferToJSON(updateEdgeConfigTransfer) {
    return JSON.stringify(UpdateEdgeConfigTransfer$outboundSchema.parse(updateEdgeConfigTransfer));
}
export function updateEdgeConfigTransferFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateEdgeConfigTransfer$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateEdgeConfigTransfer' from JSON`);
}
/** @internal */
export const UpdateEdgeConfigSchema$inboundSchema = z.object({});
/** @internal */
export const UpdateEdgeConfigSchema$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateEdgeConfigSchema$;
(function (UpdateEdgeConfigSchema$) {
    /** @deprecated use `UpdateEdgeConfigSchema$inboundSchema` instead. */
    UpdateEdgeConfigSchema$.inboundSchema = UpdateEdgeConfigSchema$inboundSchema;
    /** @deprecated use `UpdateEdgeConfigSchema$outboundSchema` instead. */
    UpdateEdgeConfigSchema$.outboundSchema = UpdateEdgeConfigSchema$outboundSchema;
})(UpdateEdgeConfigSchema$ || (UpdateEdgeConfigSchema$ = {}));
export function updateEdgeConfigSchemaToJSON(updateEdgeConfigSchema) {
    return JSON.stringify(UpdateEdgeConfigSchema$outboundSchema.parse(updateEdgeConfigSchema));
}
export function updateEdgeConfigSchemaFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateEdgeConfigSchema$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateEdgeConfigSchema' from JSON`);
}
/** @internal */
export const UpdateEdgeConfigType$inboundSchema = z.nativeEnum(UpdateEdgeConfigType);
/** @internal */
export const UpdateEdgeConfigType$outboundSchema = UpdateEdgeConfigType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateEdgeConfigType$;
(function (UpdateEdgeConfigType$) {
    /** @deprecated use `UpdateEdgeConfigType$inboundSchema` instead. */
    UpdateEdgeConfigType$.inboundSchema = UpdateEdgeConfigType$inboundSchema;
    /** @deprecated use `UpdateEdgeConfigType$outboundSchema` instead. */
    UpdateEdgeConfigType$.outboundSchema = UpdateEdgeConfigType$outboundSchema;
})(UpdateEdgeConfigType$ || (UpdateEdgeConfigType$ = {}));
/** @internal */
export const UpdateEdgeConfigPurpose$inboundSchema = z.object({
    type: UpdateEdgeConfigType$inboundSchema,
    projectId: z.string(),
});
/** @internal */
export const UpdateEdgeConfigPurpose$outboundSchema = z.object({
    type: UpdateEdgeConfigType$outboundSchema,
    projectId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateEdgeConfigPurpose$;
(function (UpdateEdgeConfigPurpose$) {
    /** @deprecated use `UpdateEdgeConfigPurpose$inboundSchema` instead. */
    UpdateEdgeConfigPurpose$.inboundSchema = UpdateEdgeConfigPurpose$inboundSchema;
    /** @deprecated use `UpdateEdgeConfigPurpose$outboundSchema` instead. */
    UpdateEdgeConfigPurpose$.outboundSchema = UpdateEdgeConfigPurpose$outboundSchema;
})(UpdateEdgeConfigPurpose$ || (UpdateEdgeConfigPurpose$ = {}));
export function updateEdgeConfigPurposeToJSON(updateEdgeConfigPurpose) {
    return JSON.stringify(UpdateEdgeConfigPurpose$outboundSchema.parse(updateEdgeConfigPurpose));
}
export function updateEdgeConfigPurposeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateEdgeConfigPurpose$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateEdgeConfigPurpose' from JSON`);
}
/** @internal */
export const UpdateEdgeConfigResponseBody$inboundSchema = z.object({
    createdAt: z.number().optional(),
    updatedAt: z.number().optional(),
    id: z.string().optional(),
    slug: z.string().optional(),
    ownerId: z.string().optional(),
    digest: z.string().optional(),
    transfer: z.lazy(() => UpdateEdgeConfigTransfer$inboundSchema).optional(),
    schema: z.lazy(() => UpdateEdgeConfigSchema$inboundSchema).optional(),
    purpose: z.lazy(() => UpdateEdgeConfigPurpose$inboundSchema).optional(),
    sizeInBytes: z.number(),
    itemCount: z.number(),
});
/** @internal */
export const UpdateEdgeConfigResponseBody$outboundSchema = z.object({
    createdAt: z.number().optional(),
    updatedAt: z.number().optional(),
    id: z.string().optional(),
    slug: z.string().optional(),
    ownerId: z.string().optional(),
    digest: z.string().optional(),
    transfer: z.lazy(() => UpdateEdgeConfigTransfer$outboundSchema).optional(),
    schema: z.lazy(() => UpdateEdgeConfigSchema$outboundSchema).optional(),
    purpose: z.lazy(() => UpdateEdgeConfigPurpose$outboundSchema).optional(),
    sizeInBytes: z.number(),
    itemCount: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateEdgeConfigResponseBody$;
(function (UpdateEdgeConfigResponseBody$) {
    /** @deprecated use `UpdateEdgeConfigResponseBody$inboundSchema` instead. */
    UpdateEdgeConfigResponseBody$.inboundSchema = UpdateEdgeConfigResponseBody$inboundSchema;
    /** @deprecated use `UpdateEdgeConfigResponseBody$outboundSchema` instead. */
    UpdateEdgeConfigResponseBody$.outboundSchema = UpdateEdgeConfigResponseBody$outboundSchema;
})(UpdateEdgeConfigResponseBody$ || (UpdateEdgeConfigResponseBody$ = {}));
export function updateEdgeConfigResponseBodyToJSON(updateEdgeConfigResponseBody) {
    return JSON.stringify(UpdateEdgeConfigResponseBody$outboundSchema.parse(updateEdgeConfigResponseBody));
}
export function updateEdgeConfigResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateEdgeConfigResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateEdgeConfigResponseBody' from JSON`);
}
//# sourceMappingURL=updateedgeconfigop.js.map