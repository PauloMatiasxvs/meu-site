import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type GetConfigurationRequest = {
    /**
     * ID of the configuration to check
     */
    id: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};
/**
 * A string representing the permission for projects. Possible values are `all` or `selected`.
 */
export declare const ProjectSelection: {
    readonly Selected: "selected";
    readonly All: "all";
};
/**
 * A string representing the permission for projects. Possible values are `all` or `selected`.
 */
export type ProjectSelection = ClosedEnum<typeof ProjectSelection>;
/**
 * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
 */
export declare const GetConfigurationResponseBodyIntegrationsSource: {
    readonly Marketplace: "marketplace";
    readonly DeployButton: "deploy-button";
    readonly External: "external";
};
/**
 * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
 */
export type GetConfigurationResponseBodyIntegrationsSource = ClosedEnum<typeof GetConfigurationResponseBodyIntegrationsSource>;
export declare const GetConfigurationResponseBodyIntegrationsType: {
    readonly IntegrationConfiguration: "integration-configuration";
};
export type GetConfigurationResponseBodyIntegrationsType = ClosedEnum<typeof GetConfigurationResponseBodyIntegrationsType>;
export declare const GetConfigurationResponseBodyIntegrationsDisabledReason: {
    readonly DisabledByOwner: "disabled-by-owner";
    readonly FeatureNotAvailable: "feature-not-available";
    readonly DisabledByAdmin: "disabled-by-admin";
    readonly OriginalOwnerLeftTheTeam: "original-owner-left-the-team";
    readonly AccountPlanDowngrade: "account-plan-downgrade";
    readonly OriginalOwnerRoleDowngraded: "original-owner-role-downgraded";
};
export type GetConfigurationResponseBodyIntegrationsDisabledReason = ClosedEnum<typeof GetConfigurationResponseBodyIntegrationsDisabledReason>;
/**
 * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
 */
export declare const GetConfigurationResponseBodyIntegrationsInstallationType: {
    readonly Marketplace: "marketplace";
    readonly External: "external";
};
/**
 * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
 */
export type GetConfigurationResponseBodyIntegrationsInstallationType = ClosedEnum<typeof GetConfigurationResponseBodyIntegrationsInstallationType>;
export type GetConfigurationResponseBody2 = {
    /**
     * A string representing the permission for projects. Possible values are `all` or `selected`.
     */
    projectSelection: ProjectSelection;
    /**
     * When a configuration is limited to access certain projects, this will contain each of the project ID it is allowed to access. If it is not defined, the configuration has full access.
     */
    projects?: Array<string> | undefined;
    /**
     * A timestamp that tells you when the configuration was installed successfully
     */
    completedAt?: number | undefined;
    /**
     * A timestamp that tells you when the configuration was created
     */
    createdAt: number;
    /**
     * The unique identifier of the configuration
     */
    id: string;
    /**
     * The unique identifier of the app the configuration was created for
     */
    integrationId: string;
    /**
     * The user or team ID that owns the configuration
     */
    ownerId: string;
    /**
     * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
     */
    source?: GetConfigurationResponseBodyIntegrationsSource | undefined;
    /**
     * The slug of the integration the configuration is created for.
     */
    slug: string;
    /**
     * When the configuration was created for a team, this will show the ID of the team.
     */
    teamId?: string | null | undefined;
    type: GetConfigurationResponseBodyIntegrationsType;
    /**
     * A timestamp that tells you when the configuration was updated.
     */
    updatedAt: number;
    /**
     * The ID of the user that created the configuration.
     */
    userId: string;
    /**
     * The resources that are allowed to be accessed by the configuration.
     */
    scopes: Array<string>;
    /**
     * A timestamp that tells you when the configuration was disabled. Note: Configurations can be disabled when the associated user loses access to a team. They do not function during this time until the configuration is 'transferred', meaning the associated user is changed to one with access to the team.
     */
    disabledAt?: number | undefined;
    /**
     * A timestamp that tells you when the configuration was deleted.
     */
    deletedAt?: number | null | undefined;
    /**
     * A timestamp that tells you when the configuration deletion has been started for cases when the deletion needs to be settled/approved by partners, such as when marketplace invoices have been paid.
     */
    deleteRequestedAt?: number | null | undefined;
    disabledReason?: GetConfigurationResponseBodyIntegrationsDisabledReason | undefined;
    /**
     * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
     */
    installationType?: GetConfigurationResponseBodyIntegrationsInstallationType | undefined;
    canConfigureOpenTelemetry?: boolean | undefined;
};
export declare const GetConfigurationResponseBodyIntegrationsResponseType: {
    readonly Prepayment: "prepayment";
    readonly Subscription: "subscription";
};
export type GetConfigurationResponseBodyIntegrationsResponseType = ClosedEnum<typeof GetConfigurationResponseBodyIntegrationsResponseType>;
export declare const GetConfigurationResponseBodyScope: {
    readonly Installation: "installation";
    readonly Resource: "resource";
};
export type GetConfigurationResponseBodyScope = ClosedEnum<typeof GetConfigurationResponseBodyScope>;
export type GetConfigurationResponseBodyDetails = {
    label: string;
    value?: string | undefined;
};
export type GetConfigurationResponseBodyHeightlightedDetails = {
    label: string;
    value?: string | undefined;
};
export type GetConfigurationResponseBodyQuote = {
    line: string;
    amount: string;
};
export type GetConfigurationResponseBodyBillingPlan = {
    id: string;
    type: GetConfigurationResponseBodyIntegrationsResponseType;
    name: string;
    scope?: GetConfigurationResponseBodyScope | undefined;
    description: string;
    paymentMethodRequired?: boolean | undefined;
    preauthorizationAmount?: number | undefined;
    cost?: string | undefined;
    details?: Array<GetConfigurationResponseBodyDetails> | undefined;
    heightlightedDetails?: Array<GetConfigurationResponseBodyHeightlightedDetails> | undefined;
    quote?: Array<GetConfigurationResponseBodyQuote> | undefined;
    effectiveDate?: string | undefined;
};
/**
 * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
 */
export declare const GetConfigurationResponseBodySource: {
    readonly Marketplace: "marketplace";
    readonly DeployButton: "deploy-button";
    readonly External: "external";
};
/**
 * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
 */
export type GetConfigurationResponseBodySource = ClosedEnum<typeof GetConfigurationResponseBodySource>;
export declare const GetConfigurationResponseBodyType: {
    readonly IntegrationConfiguration: "integration-configuration";
};
export type GetConfigurationResponseBodyType = ClosedEnum<typeof GetConfigurationResponseBodyType>;
export declare const GetConfigurationResponseBodyDisabledReason: {
    readonly DisabledByOwner: "disabled-by-owner";
    readonly FeatureNotAvailable: "feature-not-available";
    readonly DisabledByAdmin: "disabled-by-admin";
    readonly OriginalOwnerLeftTheTeam: "original-owner-left-the-team";
    readonly AccountPlanDowngrade: "account-plan-downgrade";
    readonly OriginalOwnerRoleDowngraded: "original-owner-role-downgraded";
};
export type GetConfigurationResponseBodyDisabledReason = ClosedEnum<typeof GetConfigurationResponseBodyDisabledReason>;
/**
 * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
 */
export declare const GetConfigurationResponseBodyInstallationType: {
    readonly Marketplace: "marketplace";
    readonly External: "external";
};
/**
 * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
 */
export type GetConfigurationResponseBodyInstallationType = ClosedEnum<typeof GetConfigurationResponseBodyInstallationType>;
/**
 * The configuration with the provided id
 */
export type GetConfigurationResponseBody1 = {
    billingPlan?: GetConfigurationResponseBodyBillingPlan | undefined;
    billingTotal?: string | undefined;
    periodStart?: string | undefined;
    periodEnd?: string | undefined;
    /**
     * A timestamp that tells you when the configuration was installed successfully
     */
    completedAt?: number | undefined;
    /**
     * A timestamp that tells you when the configuration was created
     */
    createdAt: number;
    /**
     * The unique identifier of the configuration
     */
    id: string;
    /**
     * The unique identifier of the app the configuration was created for
     */
    integrationId: string;
    /**
     * The user or team ID that owns the configuration
     */
    ownerId: string;
    /**
     * When a configuration is limited to access certain projects, this will contain each of the project ID it is allowed to access. If it is not defined, the configuration has full access.
     */
    projects?: Array<string> | undefined;
    /**
     * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
     */
    source?: GetConfigurationResponseBodySource | undefined;
    /**
     * The slug of the integration the configuration is created for.
     */
    slug: string;
    /**
     * When the configuration was created for a team, this will show the ID of the team.
     */
    teamId?: string | null | undefined;
    type: GetConfigurationResponseBodyType;
    /**
     * A timestamp that tells you when the configuration was updated.
     */
    updatedAt: number;
    /**
     * The ID of the user that created the configuration.
     */
    userId: string;
    /**
     * The resources that are allowed to be accessed by the configuration.
     */
    scopes: Array<string>;
    /**
     * A timestamp that tells you when the configuration was disabled. Note: Configurations can be disabled when the associated user loses access to a team. They do not function during this time until the configuration is 'transferred', meaning the associated user is changed to one with access to the team.
     */
    disabledAt?: number | undefined;
    /**
     * A timestamp that tells you when the configuration was deleted.
     */
    deletedAt?: number | null | undefined;
    /**
     * A timestamp that tells you when the configuration deletion has been started for cases when the deletion needs to be settled/approved by partners, such as when marketplace invoices have been paid.
     */
    deleteRequestedAt?: number | null | undefined;
    disabledReason?: GetConfigurationResponseBodyDisabledReason | undefined;
    /**
     * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
     */
    installationType?: GetConfigurationResponseBodyInstallationType | undefined;
};
/**
 * The configuration with the provided id
 */
export type GetConfigurationResponseBody = GetConfigurationResponseBody2 | GetConfigurationResponseBody1;
/** @internal */
export declare const GetConfigurationRequest$inboundSchema: z.ZodType<GetConfigurationRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetConfigurationRequest$Outbound = {
    id: string;
    teamId?: string | undefined;
    slug?: string | undefined;
};
/** @internal */
export declare const GetConfigurationRequest$outboundSchema: z.ZodType<GetConfigurationRequest$Outbound, z.ZodTypeDef, GetConfigurationRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetConfigurationRequest$ {
    /** @deprecated use `GetConfigurationRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetConfigurationRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetConfigurationRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetConfigurationRequest$Outbound, z.ZodTypeDef, GetConfigurationRequest>;
    /** @deprecated use `GetConfigurationRequest$Outbound` instead. */
    type Outbound = GetConfigurationRequest$Outbound;
}
export declare function getConfigurationRequestToJSON(getConfigurationRequest: GetConfigurationRequest): string;
export declare function getConfigurationRequestFromJSON(jsonString: string): SafeParseResult<GetConfigurationRequest, SDKValidationError>;
/** @internal */
export declare const ProjectSelection$inboundSchema: z.ZodNativeEnum<typeof ProjectSelection>;
/** @internal */
export declare const ProjectSelection$outboundSchema: z.ZodNativeEnum<typeof ProjectSelection>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ProjectSelection$ {
    /** @deprecated use `ProjectSelection$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Selected: "selected";
        readonly All: "all";
    }>;
    /** @deprecated use `ProjectSelection$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Selected: "selected";
        readonly All: "all";
    }>;
}
/** @internal */
export declare const GetConfigurationResponseBodyIntegrationsSource$inboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyIntegrationsSource>;
/** @internal */
export declare const GetConfigurationResponseBodyIntegrationsSource$outboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyIntegrationsSource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetConfigurationResponseBodyIntegrationsSource$ {
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsSource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Marketplace: "marketplace";
        readonly DeployButton: "deploy-button";
        readonly External: "external";
    }>;
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsSource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Marketplace: "marketplace";
        readonly DeployButton: "deploy-button";
        readonly External: "external";
    }>;
}
/** @internal */
export declare const GetConfigurationResponseBodyIntegrationsType$inboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyIntegrationsType>;
/** @internal */
export declare const GetConfigurationResponseBodyIntegrationsType$outboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyIntegrationsType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetConfigurationResponseBodyIntegrationsType$ {
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly IntegrationConfiguration: "integration-configuration";
    }>;
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly IntegrationConfiguration: "integration-configuration";
    }>;
}
/** @internal */
export declare const GetConfigurationResponseBodyIntegrationsDisabledReason$inboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyIntegrationsDisabledReason>;
/** @internal */
export declare const GetConfigurationResponseBodyIntegrationsDisabledReason$outboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyIntegrationsDisabledReason>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetConfigurationResponseBodyIntegrationsDisabledReason$ {
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsDisabledReason$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly DisabledByOwner: "disabled-by-owner";
        readonly FeatureNotAvailable: "feature-not-available";
        readonly DisabledByAdmin: "disabled-by-admin";
        readonly OriginalOwnerLeftTheTeam: "original-owner-left-the-team";
        readonly AccountPlanDowngrade: "account-plan-downgrade";
        readonly OriginalOwnerRoleDowngraded: "original-owner-role-downgraded";
    }>;
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsDisabledReason$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly DisabledByOwner: "disabled-by-owner";
        readonly FeatureNotAvailable: "feature-not-available";
        readonly DisabledByAdmin: "disabled-by-admin";
        readonly OriginalOwnerLeftTheTeam: "original-owner-left-the-team";
        readonly AccountPlanDowngrade: "account-plan-downgrade";
        readonly OriginalOwnerRoleDowngraded: "original-owner-role-downgraded";
    }>;
}
/** @internal */
export declare const GetConfigurationResponseBodyIntegrationsInstallationType$inboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyIntegrationsInstallationType>;
/** @internal */
export declare const GetConfigurationResponseBodyIntegrationsInstallationType$outboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyIntegrationsInstallationType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetConfigurationResponseBodyIntegrationsInstallationType$ {
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsInstallationType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Marketplace: "marketplace";
        readonly External: "external";
    }>;
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsInstallationType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Marketplace: "marketplace";
        readonly External: "external";
    }>;
}
/** @internal */
export declare const GetConfigurationResponseBody2$inboundSchema: z.ZodType<GetConfigurationResponseBody2, z.ZodTypeDef, unknown>;
/** @internal */
export type GetConfigurationResponseBody2$Outbound = {
    projectSelection: string;
    projects?: Array<string> | undefined;
    completedAt?: number | undefined;
    createdAt: number;
    id: string;
    integrationId: string;
    ownerId: string;
    source?: string | undefined;
    slug: string;
    teamId?: string | null | undefined;
    type: string;
    updatedAt: number;
    userId: string;
    scopes: Array<string>;
    disabledAt?: number | undefined;
    deletedAt?: number | null | undefined;
    deleteRequestedAt?: number | null | undefined;
    disabledReason?: string | undefined;
    installationType?: string | undefined;
    canConfigureOpenTelemetry?: boolean | undefined;
};
/** @internal */
export declare const GetConfigurationResponseBody2$outboundSchema: z.ZodType<GetConfigurationResponseBody2$Outbound, z.ZodTypeDef, GetConfigurationResponseBody2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetConfigurationResponseBody2$ {
    /** @deprecated use `GetConfigurationResponseBody2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetConfigurationResponseBody2, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetConfigurationResponseBody2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetConfigurationResponseBody2$Outbound, z.ZodTypeDef, GetConfigurationResponseBody2>;
    /** @deprecated use `GetConfigurationResponseBody2$Outbound` instead. */
    type Outbound = GetConfigurationResponseBody2$Outbound;
}
export declare function getConfigurationResponseBody2ToJSON(getConfigurationResponseBody2: GetConfigurationResponseBody2): string;
export declare function getConfigurationResponseBody2FromJSON(jsonString: string): SafeParseResult<GetConfigurationResponseBody2, SDKValidationError>;
/** @internal */
export declare const GetConfigurationResponseBodyIntegrationsResponseType$inboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyIntegrationsResponseType>;
/** @internal */
export declare const GetConfigurationResponseBodyIntegrationsResponseType$outboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyIntegrationsResponseType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetConfigurationResponseBodyIntegrationsResponseType$ {
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsResponseType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Prepayment: "prepayment";
        readonly Subscription: "subscription";
    }>;
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsResponseType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Prepayment: "prepayment";
        readonly Subscription: "subscription";
    }>;
}
/** @internal */
export declare const GetConfigurationResponseBodyScope$inboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyScope>;
/** @internal */
export declare const GetConfigurationResponseBodyScope$outboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyScope>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetConfigurationResponseBodyScope$ {
    /** @deprecated use `GetConfigurationResponseBodyScope$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Installation: "installation";
        readonly Resource: "resource";
    }>;
    /** @deprecated use `GetConfigurationResponseBodyScope$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Installation: "installation";
        readonly Resource: "resource";
    }>;
}
/** @internal */
export declare const GetConfigurationResponseBodyDetails$inboundSchema: z.ZodType<GetConfigurationResponseBodyDetails, z.ZodTypeDef, unknown>;
/** @internal */
export type GetConfigurationResponseBodyDetails$Outbound = {
    label: string;
    value?: string | undefined;
};
/** @internal */
export declare const GetConfigurationResponseBodyDetails$outboundSchema: z.ZodType<GetConfigurationResponseBodyDetails$Outbound, z.ZodTypeDef, GetConfigurationResponseBodyDetails>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetConfigurationResponseBodyDetails$ {
    /** @deprecated use `GetConfigurationResponseBodyDetails$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetConfigurationResponseBodyDetails, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetConfigurationResponseBodyDetails$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetConfigurationResponseBodyDetails$Outbound, z.ZodTypeDef, GetConfigurationResponseBodyDetails>;
    /** @deprecated use `GetConfigurationResponseBodyDetails$Outbound` instead. */
    type Outbound = GetConfigurationResponseBodyDetails$Outbound;
}
export declare function getConfigurationResponseBodyDetailsToJSON(getConfigurationResponseBodyDetails: GetConfigurationResponseBodyDetails): string;
export declare function getConfigurationResponseBodyDetailsFromJSON(jsonString: string): SafeParseResult<GetConfigurationResponseBodyDetails, SDKValidationError>;
/** @internal */
export declare const GetConfigurationResponseBodyHeightlightedDetails$inboundSchema: z.ZodType<GetConfigurationResponseBodyHeightlightedDetails, z.ZodTypeDef, unknown>;
/** @internal */
export type GetConfigurationResponseBodyHeightlightedDetails$Outbound = {
    label: string;
    value?: string | undefined;
};
/** @internal */
export declare const GetConfigurationResponseBodyHeightlightedDetails$outboundSchema: z.ZodType<GetConfigurationResponseBodyHeightlightedDetails$Outbound, z.ZodTypeDef, GetConfigurationResponseBodyHeightlightedDetails>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetConfigurationResponseBodyHeightlightedDetails$ {
    /** @deprecated use `GetConfigurationResponseBodyHeightlightedDetails$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetConfigurationResponseBodyHeightlightedDetails, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetConfigurationResponseBodyHeightlightedDetails$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetConfigurationResponseBodyHeightlightedDetails$Outbound, z.ZodTypeDef, GetConfigurationResponseBodyHeightlightedDetails>;
    /** @deprecated use `GetConfigurationResponseBodyHeightlightedDetails$Outbound` instead. */
    type Outbound = GetConfigurationResponseBodyHeightlightedDetails$Outbound;
}
export declare function getConfigurationResponseBodyHeightlightedDetailsToJSON(getConfigurationResponseBodyHeightlightedDetails: GetConfigurationResponseBodyHeightlightedDetails): string;
export declare function getConfigurationResponseBodyHeightlightedDetailsFromJSON(jsonString: string): SafeParseResult<GetConfigurationResponseBodyHeightlightedDetails, SDKValidationError>;
/** @internal */
export declare const GetConfigurationResponseBodyQuote$inboundSchema: z.ZodType<GetConfigurationResponseBodyQuote, z.ZodTypeDef, unknown>;
/** @internal */
export type GetConfigurationResponseBodyQuote$Outbound = {
    line: string;
    amount: string;
};
/** @internal */
export declare const GetConfigurationResponseBodyQuote$outboundSchema: z.ZodType<GetConfigurationResponseBodyQuote$Outbound, z.ZodTypeDef, GetConfigurationResponseBodyQuote>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetConfigurationResponseBodyQuote$ {
    /** @deprecated use `GetConfigurationResponseBodyQuote$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetConfigurationResponseBodyQuote, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetConfigurationResponseBodyQuote$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetConfigurationResponseBodyQuote$Outbound, z.ZodTypeDef, GetConfigurationResponseBodyQuote>;
    /** @deprecated use `GetConfigurationResponseBodyQuote$Outbound` instead. */
    type Outbound = GetConfigurationResponseBodyQuote$Outbound;
}
export declare function getConfigurationResponseBodyQuoteToJSON(getConfigurationResponseBodyQuote: GetConfigurationResponseBodyQuote): string;
export declare function getConfigurationResponseBodyQuoteFromJSON(jsonString: string): SafeParseResult<GetConfigurationResponseBodyQuote, SDKValidationError>;
/** @internal */
export declare const GetConfigurationResponseBodyBillingPlan$inboundSchema: z.ZodType<GetConfigurationResponseBodyBillingPlan, z.ZodTypeDef, unknown>;
/** @internal */
export type GetConfigurationResponseBodyBillingPlan$Outbound = {
    id: string;
    type: string;
    name: string;
    scope?: string | undefined;
    description: string;
    paymentMethodRequired?: boolean | undefined;
    preauthorizationAmount?: number | undefined;
    cost?: string | undefined;
    details?: Array<GetConfigurationResponseBodyDetails$Outbound> | undefined;
    heightlightedDetails?: Array<GetConfigurationResponseBodyHeightlightedDetails$Outbound> | undefined;
    quote?: Array<GetConfigurationResponseBodyQuote$Outbound> | undefined;
    effectiveDate?: string | undefined;
};
/** @internal */
export declare const GetConfigurationResponseBodyBillingPlan$outboundSchema: z.ZodType<GetConfigurationResponseBodyBillingPlan$Outbound, z.ZodTypeDef, GetConfigurationResponseBodyBillingPlan>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetConfigurationResponseBodyBillingPlan$ {
    /** @deprecated use `GetConfigurationResponseBodyBillingPlan$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetConfigurationResponseBodyBillingPlan, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetConfigurationResponseBodyBillingPlan$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetConfigurationResponseBodyBillingPlan$Outbound, z.ZodTypeDef, GetConfigurationResponseBodyBillingPlan>;
    /** @deprecated use `GetConfigurationResponseBodyBillingPlan$Outbound` instead. */
    type Outbound = GetConfigurationResponseBodyBillingPlan$Outbound;
}
export declare function getConfigurationResponseBodyBillingPlanToJSON(getConfigurationResponseBodyBillingPlan: GetConfigurationResponseBodyBillingPlan): string;
export declare function getConfigurationResponseBodyBillingPlanFromJSON(jsonString: string): SafeParseResult<GetConfigurationResponseBodyBillingPlan, SDKValidationError>;
/** @internal */
export declare const GetConfigurationResponseBodySource$inboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodySource>;
/** @internal */
export declare const GetConfigurationResponseBodySource$outboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodySource>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetConfigurationResponseBodySource$ {
    /** @deprecated use `GetConfigurationResponseBodySource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Marketplace: "marketplace";
        readonly DeployButton: "deploy-button";
        readonly External: "external";
    }>;
    /** @deprecated use `GetConfigurationResponseBodySource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Marketplace: "marketplace";
        readonly DeployButton: "deploy-button";
        readonly External: "external";
    }>;
}
/** @internal */
export declare const GetConfigurationResponseBodyType$inboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyType>;
/** @internal */
export declare const GetConfigurationResponseBodyType$outboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetConfigurationResponseBodyType$ {
    /** @deprecated use `GetConfigurationResponseBodyType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly IntegrationConfiguration: "integration-configuration";
    }>;
    /** @deprecated use `GetConfigurationResponseBodyType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly IntegrationConfiguration: "integration-configuration";
    }>;
}
/** @internal */
export declare const GetConfigurationResponseBodyDisabledReason$inboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyDisabledReason>;
/** @internal */
export declare const GetConfigurationResponseBodyDisabledReason$outboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyDisabledReason>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetConfigurationResponseBodyDisabledReason$ {
    /** @deprecated use `GetConfigurationResponseBodyDisabledReason$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly DisabledByOwner: "disabled-by-owner";
        readonly FeatureNotAvailable: "feature-not-available";
        readonly DisabledByAdmin: "disabled-by-admin";
        readonly OriginalOwnerLeftTheTeam: "original-owner-left-the-team";
        readonly AccountPlanDowngrade: "account-plan-downgrade";
        readonly OriginalOwnerRoleDowngraded: "original-owner-role-downgraded";
    }>;
    /** @deprecated use `GetConfigurationResponseBodyDisabledReason$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly DisabledByOwner: "disabled-by-owner";
        readonly FeatureNotAvailable: "feature-not-available";
        readonly DisabledByAdmin: "disabled-by-admin";
        readonly OriginalOwnerLeftTheTeam: "original-owner-left-the-team";
        readonly AccountPlanDowngrade: "account-plan-downgrade";
        readonly OriginalOwnerRoleDowngraded: "original-owner-role-downgraded";
    }>;
}
/** @internal */
export declare const GetConfigurationResponseBodyInstallationType$inboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyInstallationType>;
/** @internal */
export declare const GetConfigurationResponseBodyInstallationType$outboundSchema: z.ZodNativeEnum<typeof GetConfigurationResponseBodyInstallationType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetConfigurationResponseBodyInstallationType$ {
    /** @deprecated use `GetConfigurationResponseBodyInstallationType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Marketplace: "marketplace";
        readonly External: "external";
    }>;
    /** @deprecated use `GetConfigurationResponseBodyInstallationType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Marketplace: "marketplace";
        readonly External: "external";
    }>;
}
/** @internal */
export declare const GetConfigurationResponseBody1$inboundSchema: z.ZodType<GetConfigurationResponseBody1, z.ZodTypeDef, unknown>;
/** @internal */
export type GetConfigurationResponseBody1$Outbound = {
    billingPlan?: GetConfigurationResponseBodyBillingPlan$Outbound | undefined;
    billingTotal?: string | undefined;
    periodStart?: string | undefined;
    periodEnd?: string | undefined;
    completedAt?: number | undefined;
    createdAt: number;
    id: string;
    integrationId: string;
    ownerId: string;
    projects?: Array<string> | undefined;
    source?: string | undefined;
    slug: string;
    teamId?: string | null | undefined;
    type: string;
    updatedAt: number;
    userId: string;
    scopes: Array<string>;
    disabledAt?: number | undefined;
    deletedAt?: number | null | undefined;
    deleteRequestedAt?: number | null | undefined;
    disabledReason?: string | undefined;
    installationType?: string | undefined;
};
/** @internal */
export declare const GetConfigurationResponseBody1$outboundSchema: z.ZodType<GetConfigurationResponseBody1$Outbound, z.ZodTypeDef, GetConfigurationResponseBody1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetConfigurationResponseBody1$ {
    /** @deprecated use `GetConfigurationResponseBody1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetConfigurationResponseBody1, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetConfigurationResponseBody1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetConfigurationResponseBody1$Outbound, z.ZodTypeDef, GetConfigurationResponseBody1>;
    /** @deprecated use `GetConfigurationResponseBody1$Outbound` instead. */
    type Outbound = GetConfigurationResponseBody1$Outbound;
}
export declare function getConfigurationResponseBody1ToJSON(getConfigurationResponseBody1: GetConfigurationResponseBody1): string;
export declare function getConfigurationResponseBody1FromJSON(jsonString: string): SafeParseResult<GetConfigurationResponseBody1, SDKValidationError>;
/** @internal */
export declare const GetConfigurationResponseBody$inboundSchema: z.ZodType<GetConfigurationResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type GetConfigurationResponseBody$Outbound = GetConfigurationResponseBody2$Outbound | GetConfigurationResponseBody1$Outbound;
/** @internal */
export declare const GetConfigurationResponseBody$outboundSchema: z.ZodType<GetConfigurationResponseBody$Outbound, z.ZodTypeDef, GetConfigurationResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetConfigurationResponseBody$ {
    /** @deprecated use `GetConfigurationResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetConfigurationResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetConfigurationResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetConfigurationResponseBody$Outbound, z.ZodTypeDef, GetConfigurationResponseBody>;
    /** @deprecated use `GetConfigurationResponseBody$Outbound` instead. */
    type Outbound = GetConfigurationResponseBody$Outbound;
}
export declare function getConfigurationResponseBodyToJSON(getConfigurationResponseBody: GetConfigurationResponseBody): string;
export declare function getConfigurationResponseBodyFromJSON(jsonString: string): SafeParseResult<GetConfigurationResponseBody, SDKValidationError>;
//# sourceMappingURL=getconfigurationop.d.ts.map