/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
export const GetEdgeConfigType = {
    Flags: "flags",
};
/** @internal */
export const GetEdgeConfigRequest$inboundSchema = z.object({
    edgeConfigId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/** @internal */
export const GetEdgeConfigRequest$outboundSchema = z.object({
    edgeConfigId: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetEdgeConfigRequest$;
(function (GetEdgeConfigRequest$) {
    /** @deprecated use `GetEdgeConfigRequest$inboundSchema` instead. */
    GetEdgeConfigRequest$.inboundSchema = GetEdgeConfigRequest$inboundSchema;
    /** @deprecated use `GetEdgeConfigRequest$outboundSchema` instead. */
    GetEdgeConfigRequest$.outboundSchema = GetEdgeConfigRequest$outboundSchema;
})(GetEdgeConfigRequest$ || (GetEdgeConfigRequest$ = {}));
export function getEdgeConfigRequestToJSON(getEdgeConfigRequest) {
    return JSON.stringify(GetEdgeConfigRequest$outboundSchema.parse(getEdgeConfigRequest));
}
export function getEdgeConfigRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetEdgeConfigRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetEdgeConfigRequest' from JSON`);
}
/** @internal */
export const GetEdgeConfigTransfer$inboundSchema = z.object({
    fromAccountId: z.string(),
    startedAt: z.number(),
    doneAt: z.nullable(z.number()),
});
/** @internal */
export const GetEdgeConfigTransfer$outboundSchema = z.object({
    fromAccountId: z.string(),
    startedAt: z.number(),
    doneAt: z.nullable(z.number()),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetEdgeConfigTransfer$;
(function (GetEdgeConfigTransfer$) {
    /** @deprecated use `GetEdgeConfigTransfer$inboundSchema` instead. */
    GetEdgeConfigTransfer$.inboundSchema = GetEdgeConfigTransfer$inboundSchema;
    /** @deprecated use `GetEdgeConfigTransfer$outboundSchema` instead. */
    GetEdgeConfigTransfer$.outboundSchema = GetEdgeConfigTransfer$outboundSchema;
})(GetEdgeConfigTransfer$ || (GetEdgeConfigTransfer$ = {}));
export function getEdgeConfigTransferToJSON(getEdgeConfigTransfer) {
    return JSON.stringify(GetEdgeConfigTransfer$outboundSchema.parse(getEdgeConfigTransfer));
}
export function getEdgeConfigTransferFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetEdgeConfigTransfer$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetEdgeConfigTransfer' from JSON`);
}
/** @internal */
export const GetEdgeConfigSchema$inboundSchema = z.object({});
/** @internal */
export const GetEdgeConfigSchema$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetEdgeConfigSchema$;
(function (GetEdgeConfigSchema$) {
    /** @deprecated use `GetEdgeConfigSchema$inboundSchema` instead. */
    GetEdgeConfigSchema$.inboundSchema = GetEdgeConfigSchema$inboundSchema;
    /** @deprecated use `GetEdgeConfigSchema$outboundSchema` instead. */
    GetEdgeConfigSchema$.outboundSchema = GetEdgeConfigSchema$outboundSchema;
})(GetEdgeConfigSchema$ || (GetEdgeConfigSchema$ = {}));
export function getEdgeConfigSchemaToJSON(getEdgeConfigSchema) {
    return JSON.stringify(GetEdgeConfigSchema$outboundSchema.parse(getEdgeConfigSchema));
}
export function getEdgeConfigSchemaFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetEdgeConfigSchema$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetEdgeConfigSchema' from JSON`);
}
/** @internal */
export const GetEdgeConfigType$inboundSchema = z.nativeEnum(GetEdgeConfigType);
/** @internal */
export const GetEdgeConfigType$outboundSchema = GetEdgeConfigType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetEdgeConfigType$;
(function (GetEdgeConfigType$) {
    /** @deprecated use `GetEdgeConfigType$inboundSchema` instead. */
    GetEdgeConfigType$.inboundSchema = GetEdgeConfigType$inboundSchema;
    /** @deprecated use `GetEdgeConfigType$outboundSchema` instead. */
    GetEdgeConfigType$.outboundSchema = GetEdgeConfigType$outboundSchema;
})(GetEdgeConfigType$ || (GetEdgeConfigType$ = {}));
/** @internal */
export const GetEdgeConfigPurpose$inboundSchema = z.object({
    type: GetEdgeConfigType$inboundSchema,
    projectId: z.string(),
});
/** @internal */
export const GetEdgeConfigPurpose$outboundSchema = z.object({
    type: GetEdgeConfigType$outboundSchema,
    projectId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetEdgeConfigPurpose$;
(function (GetEdgeConfigPurpose$) {
    /** @deprecated use `GetEdgeConfigPurpose$inboundSchema` instead. */
    GetEdgeConfigPurpose$.inboundSchema = GetEdgeConfigPurpose$inboundSchema;
    /** @deprecated use `GetEdgeConfigPurpose$outboundSchema` instead. */
    GetEdgeConfigPurpose$.outboundSchema = GetEdgeConfigPurpose$outboundSchema;
})(GetEdgeConfigPurpose$ || (GetEdgeConfigPurpose$ = {}));
export function getEdgeConfigPurposeToJSON(getEdgeConfigPurpose) {
    return JSON.stringify(GetEdgeConfigPurpose$outboundSchema.parse(getEdgeConfigPurpose));
}
export function getEdgeConfigPurposeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetEdgeConfigPurpose$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetEdgeConfigPurpose' from JSON`);
}
/** @internal */
export const GetEdgeConfigResponseBody$inboundSchema = z.object({
    createdAt: z.number().optional(),
    updatedAt: z.number().optional(),
    id: z.string().optional(),
    slug: z.string().optional(),
    ownerId: z.string().optional(),
    digest: z.string().optional(),
    transfer: z.lazy(() => GetEdgeConfigTransfer$inboundSchema).optional(),
    schema: z.lazy(() => GetEdgeConfigSchema$inboundSchema).optional(),
    purpose: z.lazy(() => GetEdgeConfigPurpose$inboundSchema).optional(),
    sizeInBytes: z.number(),
    itemCount: z.number(),
});
/** @internal */
export const GetEdgeConfigResponseBody$outboundSchema = z.object({
    createdAt: z.number().optional(),
    updatedAt: z.number().optional(),
    id: z.string().optional(),
    slug: z.string().optional(),
    ownerId: z.string().optional(),
    digest: z.string().optional(),
    transfer: z.lazy(() => GetEdgeConfigTransfer$outboundSchema).optional(),
    schema: z.lazy(() => GetEdgeConfigSchema$outboundSchema).optional(),
    purpose: z.lazy(() => GetEdgeConfigPurpose$outboundSchema).optional(),
    sizeInBytes: z.number(),
    itemCount: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetEdgeConfigResponseBody$;
(function (GetEdgeConfigResponseBody$) {
    /** @deprecated use `GetEdgeConfigResponseBody$inboundSchema` instead. */
    GetEdgeConfigResponseBody$.inboundSchema = GetEdgeConfigResponseBody$inboundSchema;
    /** @deprecated use `GetEdgeConfigResponseBody$outboundSchema` instead. */
    GetEdgeConfigResponseBody$.outboundSchema = GetEdgeConfigResponseBody$outboundSchema;
})(GetEdgeConfigResponseBody$ || (GetEdgeConfigResponseBody$ = {}));
export function getEdgeConfigResponseBodyToJSON(getEdgeConfigResponseBody) {
    return JSON.stringify(GetEdgeConfigResponseBody$outboundSchema.parse(getEdgeConfigResponseBody));
}
export function getEdgeConfigResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetEdgeConfigResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetEdgeConfigResponseBody' from JSON`);
}
//# sourceMappingURL=getedgeconfigop.js.map