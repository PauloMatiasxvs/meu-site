/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/** @internal */
export const Secrets$inboundSchema = z.object({
    name: z.string(),
    value: z.string(),
    prefix: z.string().optional(),
});
/** @internal */
export const Secrets$outboundSchema = z.object({
    name: z.string(),
    value: z.string(),
    prefix: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Secrets$;
(function (Secrets$) {
    /** @deprecated use `Secrets$inboundSchema` instead. */
    Secrets$.inboundSchema = Secrets$inboundSchema;
    /** @deprecated use `Secrets$outboundSchema` instead. */
    Secrets$.outboundSchema = Secrets$outboundSchema;
})(Secrets$ || (Secrets$ = {}));
export function secretsToJSON(secrets) {
    return JSON.stringify(Secrets$outboundSchema.parse(secrets));
}
export function secretsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Secrets$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Secrets' from JSON`);
}
/** @internal */
export const UpdateResourceSecretsRequestBody$inboundSchema = z.object({
    secrets: z.array(z.lazy(() => Secrets$inboundSchema)),
});
/** @internal */
export const UpdateResourceSecretsRequestBody$outboundSchema = z.object({
    secrets: z.array(z.lazy(() => Secrets$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateResourceSecretsRequestBody$;
(function (UpdateResourceSecretsRequestBody$) {
    /** @deprecated use `UpdateResourceSecretsRequestBody$inboundSchema` instead. */
    UpdateResourceSecretsRequestBody$.inboundSchema = UpdateResourceSecretsRequestBody$inboundSchema;
    /** @deprecated use `UpdateResourceSecretsRequestBody$outboundSchema` instead. */
    UpdateResourceSecretsRequestBody$.outboundSchema = UpdateResourceSecretsRequestBody$outboundSchema;
})(UpdateResourceSecretsRequestBody$ || (UpdateResourceSecretsRequestBody$ = {}));
export function updateResourceSecretsRequestBodyToJSON(updateResourceSecretsRequestBody) {
    return JSON.stringify(UpdateResourceSecretsRequestBody$outboundSchema.parse(updateResourceSecretsRequestBody));
}
export function updateResourceSecretsRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateResourceSecretsRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateResourceSecretsRequestBody' from JSON`);
}
/** @internal */
export const UpdateResourceSecretsRequest$inboundSchema = z.object({
    integrationConfigurationId: z.string(),
    integrationProductIdOrSlug: z.string(),
    resourceId: z.string(),
    RequestBody: z.lazy(() => UpdateResourceSecretsRequestBody$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const UpdateResourceSecretsRequest$outboundSchema = z.object({
    integrationConfigurationId: z.string(),
    integrationProductIdOrSlug: z.string(),
    resourceId: z.string(),
    requestBody: z.lazy(() => UpdateResourceSecretsRequestBody$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpdateResourceSecretsRequest$;
(function (UpdateResourceSecretsRequest$) {
    /** @deprecated use `UpdateResourceSecretsRequest$inboundSchema` instead. */
    UpdateResourceSecretsRequest$.inboundSchema = UpdateResourceSecretsRequest$inboundSchema;
    /** @deprecated use `UpdateResourceSecretsRequest$outboundSchema` instead. */
    UpdateResourceSecretsRequest$.outboundSchema = UpdateResourceSecretsRequest$outboundSchema;
})(UpdateResourceSecretsRequest$ || (UpdateResourceSecretsRequest$ = {}));
export function updateResourceSecretsRequestToJSON(updateResourceSecretsRequest) {
    return JSON.stringify(UpdateResourceSecretsRequest$outboundSchema.parse(updateResourceSecretsRequest));
}
export function updateResourceSecretsRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpdateResourceSecretsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateResourceSecretsRequest' from JSON`);
}
//# sourceMappingURL=updateresourcesecretsop.js.map