/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
/**
 * The type of record, it could be one of the valid DNS records.
 */
export const CreateRecordRequestBodyDnsRequest10Type = {
    A: "A",
    Aaaa: "AAAA",
    Alias: "ALIAS",
    Caa: "CAA",
    Cname: "CNAME",
    Https: "HTTPS",
    Mx: "MX",
    Srv: "SRV",
    Txt: "TXT",
    Ns: "NS",
};
/**
 * The type of record, it could be one of the valid DNS records.
 */
export const CreateRecordRequestBodyDnsRequest9Type = {
    A: "A",
    Aaaa: "AAAA",
    Alias: "ALIAS",
    Caa: "CAA",
    Cname: "CNAME",
    Https: "HTTPS",
    Mx: "MX",
    Srv: "SRV",
    Txt: "TXT",
    Ns: "NS",
};
/**
 * The type of record, it could be one of the valid DNS records.
 */
export const CreateRecordRequestBodyDnsRequest8Type = {
    A: "A",
    Aaaa: "AAAA",
    Alias: "ALIAS",
    Caa: "CAA",
    Cname: "CNAME",
    Https: "HTTPS",
    Mx: "MX",
    Srv: "SRV",
    Txt: "TXT",
    Ns: "NS",
};
/**
 * The type of record, it could be one of the valid DNS records.
 */
export const CreateRecordRequestBodyDnsRequest7Type = {
    A: "A",
    Aaaa: "AAAA",
    Alias: "ALIAS",
    Caa: "CAA",
    Cname: "CNAME",
    Https: "HTTPS",
    Mx: "MX",
    Srv: "SRV",
    Txt: "TXT",
    Ns: "NS",
};
/**
 * The type of record, it could be one of the valid DNS records.
 */
export const CreateRecordRequestBodyDnsRequest6Type = {
    A: "A",
    Aaaa: "AAAA",
    Alias: "ALIAS",
    Caa: "CAA",
    Cname: "CNAME",
    Https: "HTTPS",
    Mx: "MX",
    Srv: "SRV",
    Txt: "TXT",
    Ns: "NS",
};
/**
 * The type of record, it could be one of the valid DNS records.
 */
export const CreateRecordRequestBodyDnsRequest5Type = {
    A: "A",
    Aaaa: "AAAA",
    Alias: "ALIAS",
    Caa: "CAA",
    Cname: "CNAME",
    Https: "HTTPS",
    Mx: "MX",
    Srv: "SRV",
    Txt: "TXT",
    Ns: "NS",
};
/**
 * The type of record, it could be one of the valid DNS records.
 */
export const CreateRecordRequestBodyDnsRequestType = {
    A: "A",
    Aaaa: "AAAA",
    Alias: "ALIAS",
    Caa: "CAA",
    Cname: "CNAME",
    Https: "HTTPS",
    Mx: "MX",
    Srv: "SRV",
    Txt: "TXT",
    Ns: "NS",
};
/**
 * The type of record, it could be one of the valid DNS records.
 */
export const CreateRecordRequestBodyDnsType = {
    A: "A",
    Aaaa: "AAAA",
    Alias: "ALIAS",
    Caa: "CAA",
    Cname: "CNAME",
    Https: "HTTPS",
    Mx: "MX",
    Srv: "SRV",
    Txt: "TXT",
    Ns: "NS",
};
/**
 * The type of record, it could be one of the valid DNS records.
 */
export const CreateRecordRequestBodyType = {
    A: "A",
    Aaaa: "AAAA",
    Alias: "ALIAS",
    Caa: "CAA",
    Cname: "CNAME",
    Https: "HTTPS",
    Mx: "MX",
    Srv: "SRV",
    Txt: "TXT",
    Ns: "NS",
};
/**
 * The type of record, it could be one of the valid DNS records.
 */
export const RequestBodyType = {
    A: "A",
    Aaaa: "AAAA",
    Alias: "ALIAS",
    Caa: "CAA",
    Cname: "CNAME",
    Https: "HTTPS",
    Mx: "MX",
    Srv: "SRV",
    Txt: "TXT",
    Ns: "NS",
};
/** @internal */
export const CreateRecordRequestBodyDnsRequest10Type$inboundSchema = z
    .nativeEnum(CreateRecordRequestBodyDnsRequest10Type);
/** @internal */
export const CreateRecordRequestBodyDnsRequest10Type$outboundSchema = CreateRecordRequestBodyDnsRequest10Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateRecordRequestBodyDnsRequest10Type$;
(function (CreateRecordRequestBodyDnsRequest10Type$) {
    /** @deprecated use `CreateRecordRequestBodyDnsRequest10Type$inboundSchema` instead. */
    CreateRecordRequestBodyDnsRequest10Type$.inboundSchema = CreateRecordRequestBodyDnsRequest10Type$inboundSchema;
    /** @deprecated use `CreateRecordRequestBodyDnsRequest10Type$outboundSchema` instead. */
    CreateRecordRequestBodyDnsRequest10Type$.outboundSchema = CreateRecordRequestBodyDnsRequest10Type$outboundSchema;
})(CreateRecordRequestBodyDnsRequest10Type$ || (CreateRecordRequestBodyDnsRequest10Type$ = {}));
/** @internal */
export const RequestBodyHttps$inboundSchema = z.object({
    priority: z.nullable(z.number()),
    target: z.string(),
    params: z.string().optional(),
});
/** @internal */
export const RequestBodyHttps$outboundSchema = z.object({
    priority: z.nullable(z.number()),
    target: z.string(),
    params: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequestBodyHttps$;
(function (RequestBodyHttps$) {
    /** @deprecated use `RequestBodyHttps$inboundSchema` instead. */
    RequestBodyHttps$.inboundSchema = RequestBodyHttps$inboundSchema;
    /** @deprecated use `RequestBodyHttps$outboundSchema` instead. */
    RequestBodyHttps$.outboundSchema = RequestBodyHttps$outboundSchema;
})(RequestBodyHttps$ || (RequestBodyHttps$ = {}));
export function requestBodyHttpsToJSON(requestBodyHttps) {
    return JSON.stringify(RequestBodyHttps$outboundSchema.parse(requestBodyHttps));
}
export function requestBodyHttpsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RequestBodyHttps$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RequestBodyHttps' from JSON`);
}
/** @internal */
export const Ten$inboundSchema = z
    .object({
    type: CreateRecordRequestBodyDnsRequest10Type$inboundSchema,
    ttl: z.number().optional(),
    https: z.lazy(() => RequestBodyHttps$inboundSchema),
    comment: z.string().optional(),
});
/** @internal */
export const Ten$outboundSchema = z
    .object({
    type: CreateRecordRequestBodyDnsRequest10Type$outboundSchema,
    ttl: z.number().optional(),
    https: z.lazy(() => RequestBodyHttps$outboundSchema),
    comment: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Ten$;
(function (Ten$) {
    /** @deprecated use `Ten$inboundSchema` instead. */
    Ten$.inboundSchema = Ten$inboundSchema;
    /** @deprecated use `Ten$outboundSchema` instead. */
    Ten$.outboundSchema = Ten$outboundSchema;
})(Ten$ || (Ten$ = {}));
export function tenToJSON(ten) {
    return JSON.stringify(Ten$outboundSchema.parse(ten));
}
export function tenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Ten$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Ten' from JSON`);
}
/** @internal */
export const CreateRecordRequestBodyDnsRequest9Type$inboundSchema = z.nativeEnum(CreateRecordRequestBodyDnsRequest9Type);
/** @internal */
export const CreateRecordRequestBodyDnsRequest9Type$outboundSchema = CreateRecordRequestBodyDnsRequest9Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateRecordRequestBodyDnsRequest9Type$;
(function (CreateRecordRequestBodyDnsRequest9Type$) {
    /** @deprecated use `CreateRecordRequestBodyDnsRequest9Type$inboundSchema` instead. */
    CreateRecordRequestBodyDnsRequest9Type$.inboundSchema = CreateRecordRequestBodyDnsRequest9Type$inboundSchema;
    /** @deprecated use `CreateRecordRequestBodyDnsRequest9Type$outboundSchema` instead. */
    CreateRecordRequestBodyDnsRequest9Type$.outboundSchema = CreateRecordRequestBodyDnsRequest9Type$outboundSchema;
})(CreateRecordRequestBodyDnsRequest9Type$ || (CreateRecordRequestBodyDnsRequest9Type$ = {}));
/** @internal */
export const Nine$inboundSchema = z
    .object({
    name: z.string(),
    type: CreateRecordRequestBodyDnsRequest9Type$inboundSchema,
    ttl: z.number().optional(),
    value: z.string().optional(),
    comment: z.string().optional(),
});
/** @internal */
export const Nine$outboundSchema = z.object({
    name: z.string(),
    type: CreateRecordRequestBodyDnsRequest9Type$outboundSchema,
    ttl: z.number().optional(),
    value: z.string().optional(),
    comment: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Nine$;
(function (Nine$) {
    /** @deprecated use `Nine$inboundSchema` instead. */
    Nine$.inboundSchema = Nine$inboundSchema;
    /** @deprecated use `Nine$outboundSchema` instead. */
    Nine$.outboundSchema = Nine$outboundSchema;
})(Nine$ || (Nine$ = {}));
export function nineToJSON(nine) {
    return JSON.stringify(Nine$outboundSchema.parse(nine));
}
export function nineFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Nine$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Nine' from JSON`);
}
/** @internal */
export const CreateRecordRequestBodyDnsRequest8Type$inboundSchema = z.nativeEnum(CreateRecordRequestBodyDnsRequest8Type);
/** @internal */
export const CreateRecordRequestBodyDnsRequest8Type$outboundSchema = CreateRecordRequestBodyDnsRequest8Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateRecordRequestBodyDnsRequest8Type$;
(function (CreateRecordRequestBodyDnsRequest8Type$) {
    /** @deprecated use `CreateRecordRequestBodyDnsRequest8Type$inboundSchema` instead. */
    CreateRecordRequestBodyDnsRequest8Type$.inboundSchema = CreateRecordRequestBodyDnsRequest8Type$inboundSchema;
    /** @deprecated use `CreateRecordRequestBodyDnsRequest8Type$outboundSchema` instead. */
    CreateRecordRequestBodyDnsRequest8Type$.outboundSchema = CreateRecordRequestBodyDnsRequest8Type$outboundSchema;
})(CreateRecordRequestBodyDnsRequest8Type$ || (CreateRecordRequestBodyDnsRequest8Type$ = {}));
/** @internal */
export const Eight$inboundSchema = z
    .object({
    type: CreateRecordRequestBodyDnsRequest8Type$inboundSchema,
    ttl: z.number().optional(),
    value: z.string(),
    comment: z.string().optional(),
});
/** @internal */
export const Eight$outboundSchema = z.object({
    type: CreateRecordRequestBodyDnsRequest8Type$outboundSchema,
    ttl: z.number().optional(),
    value: z.string(),
    comment: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Eight$;
(function (Eight$) {
    /** @deprecated use `Eight$inboundSchema` instead. */
    Eight$.inboundSchema = Eight$inboundSchema;
    /** @deprecated use `Eight$outboundSchema` instead. */
    Eight$.outboundSchema = Eight$outboundSchema;
})(Eight$ || (Eight$ = {}));
export function eightToJSON(eight) {
    return JSON.stringify(Eight$outboundSchema.parse(eight));
}
export function eightFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Eight$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Eight' from JSON`);
}
/** @internal */
export const CreateRecordRequestBodyDnsRequest7Type$inboundSchema = z.nativeEnum(CreateRecordRequestBodyDnsRequest7Type);
/** @internal */
export const CreateRecordRequestBodyDnsRequest7Type$outboundSchema = CreateRecordRequestBodyDnsRequest7Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateRecordRequestBodyDnsRequest7Type$;
(function (CreateRecordRequestBodyDnsRequest7Type$) {
    /** @deprecated use `CreateRecordRequestBodyDnsRequest7Type$inboundSchema` instead. */
    CreateRecordRequestBodyDnsRequest7Type$.inboundSchema = CreateRecordRequestBodyDnsRequest7Type$inboundSchema;
    /** @deprecated use `CreateRecordRequestBodyDnsRequest7Type$outboundSchema` instead. */
    CreateRecordRequestBodyDnsRequest7Type$.outboundSchema = CreateRecordRequestBodyDnsRequest7Type$outboundSchema;
})(CreateRecordRequestBodyDnsRequest7Type$ || (CreateRecordRequestBodyDnsRequest7Type$ = {}));
/** @internal */
export const RequestBodySrv$inboundSchema = z.object({
    priority: z.nullable(z.number()),
    weight: z.nullable(z.number()),
    port: z.nullable(z.number()),
    target: z.string(),
});
/** @internal */
export const RequestBodySrv$outboundSchema = z.object({
    priority: z.nullable(z.number()),
    weight: z.nullable(z.number()),
    port: z.nullable(z.number()),
    target: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequestBodySrv$;
(function (RequestBodySrv$) {
    /** @deprecated use `RequestBodySrv$inboundSchema` instead. */
    RequestBodySrv$.inboundSchema = RequestBodySrv$inboundSchema;
    /** @deprecated use `RequestBodySrv$outboundSchema` instead. */
    RequestBodySrv$.outboundSchema = RequestBodySrv$outboundSchema;
})(RequestBodySrv$ || (RequestBodySrv$ = {}));
export function requestBodySrvToJSON(requestBodySrv) {
    return JSON.stringify(RequestBodySrv$outboundSchema.parse(requestBodySrv));
}
export function requestBodySrvFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RequestBodySrv$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RequestBodySrv' from JSON`);
}
/** @internal */
export const Seven$inboundSchema = z
    .object({
    type: CreateRecordRequestBodyDnsRequest7Type$inboundSchema,
    ttl: z.number().optional(),
    srv: z.lazy(() => RequestBodySrv$inboundSchema),
    comment: z.string().optional(),
});
/** @internal */
export const Seven$outboundSchema = z.object({
    type: CreateRecordRequestBodyDnsRequest7Type$outboundSchema,
    ttl: z.number().optional(),
    srv: z.lazy(() => RequestBodySrv$outboundSchema),
    comment: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Seven$;
(function (Seven$) {
    /** @deprecated use `Seven$inboundSchema` instead. */
    Seven$.inboundSchema = Seven$inboundSchema;
    /** @deprecated use `Seven$outboundSchema` instead. */
    Seven$.outboundSchema = Seven$outboundSchema;
})(Seven$ || (Seven$ = {}));
export function sevenToJSON(seven) {
    return JSON.stringify(Seven$outboundSchema.parse(seven));
}
export function sevenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Seven$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Seven' from JSON`);
}
/** @internal */
export const CreateRecordRequestBodyDnsRequest6Type$inboundSchema = z.nativeEnum(CreateRecordRequestBodyDnsRequest6Type);
/** @internal */
export const CreateRecordRequestBodyDnsRequest6Type$outboundSchema = CreateRecordRequestBodyDnsRequest6Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateRecordRequestBodyDnsRequest6Type$;
(function (CreateRecordRequestBodyDnsRequest6Type$) {
    /** @deprecated use `CreateRecordRequestBodyDnsRequest6Type$inboundSchema` instead. */
    CreateRecordRequestBodyDnsRequest6Type$.inboundSchema = CreateRecordRequestBodyDnsRequest6Type$inboundSchema;
    /** @deprecated use `CreateRecordRequestBodyDnsRequest6Type$outboundSchema` instead. */
    CreateRecordRequestBodyDnsRequest6Type$.outboundSchema = CreateRecordRequestBodyDnsRequest6Type$outboundSchema;
})(CreateRecordRequestBodyDnsRequest6Type$ || (CreateRecordRequestBodyDnsRequest6Type$ = {}));
/** @internal */
export const Six$inboundSchema = z
    .object({
    name: z.string(),
    type: CreateRecordRequestBodyDnsRequest6Type$inboundSchema,
    ttl: z.number().optional(),
    value: z.string(),
    mxPriority: z.number(),
    comment: z.string().optional(),
});
/** @internal */
export const Six$outboundSchema = z
    .object({
    name: z.string(),
    type: CreateRecordRequestBodyDnsRequest6Type$outboundSchema,
    ttl: z.number().optional(),
    value: z.string(),
    mxPriority: z.number(),
    comment: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Six$;
(function (Six$) {
    /** @deprecated use `Six$inboundSchema` instead. */
    Six$.inboundSchema = Six$inboundSchema;
    /** @deprecated use `Six$outboundSchema` instead. */
    Six$.outboundSchema = Six$outboundSchema;
})(Six$ || (Six$ = {}));
export function sixToJSON(six) {
    return JSON.stringify(Six$outboundSchema.parse(six));
}
export function sixFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Six$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Six' from JSON`);
}
/** @internal */
export const CreateRecordRequestBodyDnsRequest5Type$inboundSchema = z.nativeEnum(CreateRecordRequestBodyDnsRequest5Type);
/** @internal */
export const CreateRecordRequestBodyDnsRequest5Type$outboundSchema = CreateRecordRequestBodyDnsRequest5Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateRecordRequestBodyDnsRequest5Type$;
(function (CreateRecordRequestBodyDnsRequest5Type$) {
    /** @deprecated use `CreateRecordRequestBodyDnsRequest5Type$inboundSchema` instead. */
    CreateRecordRequestBodyDnsRequest5Type$.inboundSchema = CreateRecordRequestBodyDnsRequest5Type$inboundSchema;
    /** @deprecated use `CreateRecordRequestBodyDnsRequest5Type$outboundSchema` instead. */
    CreateRecordRequestBodyDnsRequest5Type$.outboundSchema = CreateRecordRequestBodyDnsRequest5Type$outboundSchema;
})(CreateRecordRequestBodyDnsRequest5Type$ || (CreateRecordRequestBodyDnsRequest5Type$ = {}));
/** @internal */
export const RequestBody5$inboundSchema = z.object({
    name: z.string(),
    type: CreateRecordRequestBodyDnsRequest5Type$inboundSchema,
    ttl: z.number().optional(),
    value: z.string().optional(),
    comment: z.string().optional(),
});
/** @internal */
export const RequestBody5$outboundSchema = z.object({
    name: z.string(),
    type: CreateRecordRequestBodyDnsRequest5Type$outboundSchema,
    ttl: z.number().optional(),
    value: z.string().optional(),
    comment: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequestBody5$;
(function (RequestBody5$) {
    /** @deprecated use `RequestBody5$inboundSchema` instead. */
    RequestBody5$.inboundSchema = RequestBody5$inboundSchema;
    /** @deprecated use `RequestBody5$outboundSchema` instead. */
    RequestBody5$.outboundSchema = RequestBody5$outboundSchema;
})(RequestBody5$ || (RequestBody5$ = {}));
export function requestBody5ToJSON(requestBody5) {
    return JSON.stringify(RequestBody5$outboundSchema.parse(requestBody5));
}
export function requestBody5FromJSON(jsonString) {
    return safeParse(jsonString, (x) => RequestBody5$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RequestBody5' from JSON`);
}
/** @internal */
export const CreateRecordRequestBodyDnsRequestType$inboundSchema = z.nativeEnum(CreateRecordRequestBodyDnsRequestType);
/** @internal */
export const CreateRecordRequestBodyDnsRequestType$outboundSchema = CreateRecordRequestBodyDnsRequestType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateRecordRequestBodyDnsRequestType$;
(function (CreateRecordRequestBodyDnsRequestType$) {
    /** @deprecated use `CreateRecordRequestBodyDnsRequestType$inboundSchema` instead. */
    CreateRecordRequestBodyDnsRequestType$.inboundSchema = CreateRecordRequestBodyDnsRequestType$inboundSchema;
    /** @deprecated use `CreateRecordRequestBodyDnsRequestType$outboundSchema` instead. */
    CreateRecordRequestBodyDnsRequestType$.outboundSchema = CreateRecordRequestBodyDnsRequestType$outboundSchema;
})(CreateRecordRequestBodyDnsRequestType$ || (CreateRecordRequestBodyDnsRequestType$ = {}));
/** @internal */
export const RequestBody4$inboundSchema = z.object({
    name: z.string(),
    type: CreateRecordRequestBodyDnsRequestType$inboundSchema,
    ttl: z.number().optional(),
    value: z.string(),
    comment: z.string().optional(),
});
/** @internal */
export const RequestBody4$outboundSchema = z.object({
    name: z.string(),
    type: CreateRecordRequestBodyDnsRequestType$outboundSchema,
    ttl: z.number().optional(),
    value: z.string(),
    comment: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequestBody4$;
(function (RequestBody4$) {
    /** @deprecated use `RequestBody4$inboundSchema` instead. */
    RequestBody4$.inboundSchema = RequestBody4$inboundSchema;
    /** @deprecated use `RequestBody4$outboundSchema` instead. */
    RequestBody4$.outboundSchema = RequestBody4$outboundSchema;
})(RequestBody4$ || (RequestBody4$ = {}));
export function requestBody4ToJSON(requestBody4) {
    return JSON.stringify(RequestBody4$outboundSchema.parse(requestBody4));
}
export function requestBody4FromJSON(jsonString) {
    return safeParse(jsonString, (x) => RequestBody4$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RequestBody4' from JSON`);
}
/** @internal */
export const CreateRecordRequestBodyDnsType$inboundSchema = z.nativeEnum(CreateRecordRequestBodyDnsType);
/** @internal */
export const CreateRecordRequestBodyDnsType$outboundSchema = CreateRecordRequestBodyDnsType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateRecordRequestBodyDnsType$;
(function (CreateRecordRequestBodyDnsType$) {
    /** @deprecated use `CreateRecordRequestBodyDnsType$inboundSchema` instead. */
    CreateRecordRequestBodyDnsType$.inboundSchema = CreateRecordRequestBodyDnsType$inboundSchema;
    /** @deprecated use `CreateRecordRequestBodyDnsType$outboundSchema` instead. */
    CreateRecordRequestBodyDnsType$.outboundSchema = CreateRecordRequestBodyDnsType$outboundSchema;
})(CreateRecordRequestBodyDnsType$ || (CreateRecordRequestBodyDnsType$ = {}));
/** @internal */
export const RequestBody3$inboundSchema = z.object({
    name: z.string(),
    type: CreateRecordRequestBodyDnsType$inboundSchema,
    ttl: z.number().optional(),
    value: z.string(),
    comment: z.string().optional(),
});
/** @internal */
export const RequestBody3$outboundSchema = z.object({
    name: z.string(),
    type: CreateRecordRequestBodyDnsType$outboundSchema,
    ttl: z.number().optional(),
    value: z.string(),
    comment: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequestBody3$;
(function (RequestBody3$) {
    /** @deprecated use `RequestBody3$inboundSchema` instead. */
    RequestBody3$.inboundSchema = RequestBody3$inboundSchema;
    /** @deprecated use `RequestBody3$outboundSchema` instead. */
    RequestBody3$.outboundSchema = RequestBody3$outboundSchema;
})(RequestBody3$ || (RequestBody3$ = {}));
export function requestBody3ToJSON(requestBody3) {
    return JSON.stringify(RequestBody3$outboundSchema.parse(requestBody3));
}
export function requestBody3FromJSON(jsonString) {
    return safeParse(jsonString, (x) => RequestBody3$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RequestBody3' from JSON`);
}
/** @internal */
export const CreateRecordRequestBodyType$inboundSchema = z.nativeEnum(CreateRecordRequestBodyType);
/** @internal */
export const CreateRecordRequestBodyType$outboundSchema = CreateRecordRequestBodyType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateRecordRequestBodyType$;
(function (CreateRecordRequestBodyType$) {
    /** @deprecated use `CreateRecordRequestBodyType$inboundSchema` instead. */
    CreateRecordRequestBodyType$.inboundSchema = CreateRecordRequestBodyType$inboundSchema;
    /** @deprecated use `CreateRecordRequestBodyType$outboundSchema` instead. */
    CreateRecordRequestBodyType$.outboundSchema = CreateRecordRequestBodyType$outboundSchema;
})(CreateRecordRequestBodyType$ || (CreateRecordRequestBodyType$ = {}));
/** @internal */
export const RequestBody2$inboundSchema = z.object({
    name: z.string(),
    type: CreateRecordRequestBodyType$inboundSchema,
    ttl: z.number().optional(),
    value: z.string(),
    comment: z.string().optional(),
});
/** @internal */
export const RequestBody2$outboundSchema = z.object({
    name: z.string(),
    type: CreateRecordRequestBodyType$outboundSchema,
    ttl: z.number().optional(),
    value: z.string(),
    comment: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequestBody2$;
(function (RequestBody2$) {
    /** @deprecated use `RequestBody2$inboundSchema` instead. */
    RequestBody2$.inboundSchema = RequestBody2$inboundSchema;
    /** @deprecated use `RequestBody2$outboundSchema` instead. */
    RequestBody2$.outboundSchema = RequestBody2$outboundSchema;
})(RequestBody2$ || (RequestBody2$ = {}));
export function requestBody2ToJSON(requestBody2) {
    return JSON.stringify(RequestBody2$outboundSchema.parse(requestBody2));
}
export function requestBody2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => RequestBody2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RequestBody2' from JSON`);
}
/** @internal */
export const RequestBodyType$inboundSchema = z.nativeEnum(RequestBodyType);
/** @internal */
export const RequestBodyType$outboundSchema = RequestBodyType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequestBodyType$;
(function (RequestBodyType$) {
    /** @deprecated use `RequestBodyType$inboundSchema` instead. */
    RequestBodyType$.inboundSchema = RequestBodyType$inboundSchema;
    /** @deprecated use `RequestBodyType$outboundSchema` instead. */
    RequestBodyType$.outboundSchema = RequestBodyType$outboundSchema;
})(RequestBodyType$ || (RequestBodyType$ = {}));
/** @internal */
export const RequestBody1$inboundSchema = z.object({
    name: z.string(),
    type: RequestBodyType$inboundSchema,
    ttl: z.number().optional(),
    value: z.string(),
    comment: z.string().optional(),
});
/** @internal */
export const RequestBody1$outboundSchema = z.object({
    name: z.string(),
    type: RequestBodyType$outboundSchema,
    ttl: z.number().optional(),
    value: z.string(),
    comment: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RequestBody1$;
(function (RequestBody1$) {
    /** @deprecated use `RequestBody1$inboundSchema` instead. */
    RequestBody1$.inboundSchema = RequestBody1$inboundSchema;
    /** @deprecated use `RequestBody1$outboundSchema` instead. */
    RequestBody1$.outboundSchema = RequestBody1$outboundSchema;
})(RequestBody1$ || (RequestBody1$ = {}));
export function requestBody1ToJSON(requestBody1) {
    return JSON.stringify(RequestBody1$outboundSchema.parse(requestBody1));
}
export function requestBody1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => RequestBody1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RequestBody1' from JSON`);
}
/** @internal */
export const CreateRecordRequestBody$inboundSchema = z.union([
    z.lazy(() => Seven$inboundSchema),
    z.lazy(() => Eight$inboundSchema),
    z.lazy(() => Ten$inboundSchema),
    z.lazy(() => RequestBody1$inboundSchema),
    z.lazy(() => RequestBody2$inboundSchema),
    z.lazy(() => RequestBody3$inboundSchema),
    z.lazy(() => RequestBody4$inboundSchema),
    z.lazy(() => RequestBody5$inboundSchema),
    z.lazy(() => Nine$inboundSchema),
    z.lazy(() => Six$inboundSchema),
]);
/** @internal */
export const CreateRecordRequestBody$outboundSchema = z.union([
    z.lazy(() => Seven$outboundSchema),
    z.lazy(() => Eight$outboundSchema),
    z.lazy(() => Ten$outboundSchema),
    z.lazy(() => RequestBody1$outboundSchema),
    z.lazy(() => RequestBody2$outboundSchema),
    z.lazy(() => RequestBody3$outboundSchema),
    z.lazy(() => RequestBody4$outboundSchema),
    z.lazy(() => RequestBody5$outboundSchema),
    z.lazy(() => Nine$outboundSchema),
    z.lazy(() => Six$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateRecordRequestBody$;
(function (CreateRecordRequestBody$) {
    /** @deprecated use `CreateRecordRequestBody$inboundSchema` instead. */
    CreateRecordRequestBody$.inboundSchema = CreateRecordRequestBody$inboundSchema;
    /** @deprecated use `CreateRecordRequestBody$outboundSchema` instead. */
    CreateRecordRequestBody$.outboundSchema = CreateRecordRequestBody$outboundSchema;
})(CreateRecordRequestBody$ || (CreateRecordRequestBody$ = {}));
export function createRecordRequestBodyToJSON(createRecordRequestBody) {
    return JSON.stringify(CreateRecordRequestBody$outboundSchema.parse(createRecordRequestBody));
}
export function createRecordRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateRecordRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateRecordRequestBody' from JSON`);
}
/** @internal */
export const CreateRecordRequest$inboundSchema = z.object({
    domain: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    RequestBody: z.union([
        z.lazy(() => Seven$inboundSchema),
        z.lazy(() => Eight$inboundSchema),
        z.lazy(() => Ten$inboundSchema),
        z.lazy(() => RequestBody1$inboundSchema),
        z.lazy(() => RequestBody2$inboundSchema),
        z.lazy(() => RequestBody3$inboundSchema),
        z.lazy(() => RequestBody4$inboundSchema),
        z.lazy(() => RequestBody5$inboundSchema),
        z.lazy(() => Nine$inboundSchema),
        z.lazy(() => Six$inboundSchema),
    ]),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const CreateRecordRequest$outboundSchema = z.object({
    domain: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
    requestBody: z.union([
        z.lazy(() => Seven$outboundSchema),
        z.lazy(() => Eight$outboundSchema),
        z.lazy(() => Ten$outboundSchema),
        z.lazy(() => RequestBody1$outboundSchema),
        z.lazy(() => RequestBody2$outboundSchema),
        z.lazy(() => RequestBody3$outboundSchema),
        z.lazy(() => RequestBody4$outboundSchema),
        z.lazy(() => RequestBody5$outboundSchema),
        z.lazy(() => Nine$outboundSchema),
        z.lazy(() => Six$outboundSchema),
    ]),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateRecordRequest$;
(function (CreateRecordRequest$) {
    /** @deprecated use `CreateRecordRequest$inboundSchema` instead. */
    CreateRecordRequest$.inboundSchema = CreateRecordRequest$inboundSchema;
    /** @deprecated use `CreateRecordRequest$outboundSchema` instead. */
    CreateRecordRequest$.outboundSchema = CreateRecordRequest$outboundSchema;
})(CreateRecordRequest$ || (CreateRecordRequest$ = {}));
export function createRecordRequestToJSON(createRecordRequest) {
    return JSON.stringify(CreateRecordRequest$outboundSchema.parse(createRecordRequest));
}
export function createRecordRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateRecordRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateRecordRequest' from JSON`);
}
/** @internal */
export const CreateRecordResponseBody2$inboundSchema = z.object({
    uid: z.string(),
});
/** @internal */
export const CreateRecordResponseBody2$outboundSchema = z.object({
    uid: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateRecordResponseBody2$;
(function (CreateRecordResponseBody2$) {
    /** @deprecated use `CreateRecordResponseBody2$inboundSchema` instead. */
    CreateRecordResponseBody2$.inboundSchema = CreateRecordResponseBody2$inboundSchema;
    /** @deprecated use `CreateRecordResponseBody2$outboundSchema` instead. */
    CreateRecordResponseBody2$.outboundSchema = CreateRecordResponseBody2$outboundSchema;
})(CreateRecordResponseBody2$ || (CreateRecordResponseBody2$ = {}));
export function createRecordResponseBody2ToJSON(createRecordResponseBody2) {
    return JSON.stringify(CreateRecordResponseBody2$outboundSchema.parse(createRecordResponseBody2));
}
export function createRecordResponseBody2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateRecordResponseBody2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateRecordResponseBody2' from JSON`);
}
/** @internal */
export const CreateRecordResponseBody1$inboundSchema = z.object({
    uid: z.string(),
    updated: z.number(),
});
/** @internal */
export const CreateRecordResponseBody1$outboundSchema = z.object({
    uid: z.string(),
    updated: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateRecordResponseBody1$;
(function (CreateRecordResponseBody1$) {
    /** @deprecated use `CreateRecordResponseBody1$inboundSchema` instead. */
    CreateRecordResponseBody1$.inboundSchema = CreateRecordResponseBody1$inboundSchema;
    /** @deprecated use `CreateRecordResponseBody1$outboundSchema` instead. */
    CreateRecordResponseBody1$.outboundSchema = CreateRecordResponseBody1$outboundSchema;
})(CreateRecordResponseBody1$ || (CreateRecordResponseBody1$ = {}));
export function createRecordResponseBody1ToJSON(createRecordResponseBody1) {
    return JSON.stringify(CreateRecordResponseBody1$outboundSchema.parse(createRecordResponseBody1));
}
export function createRecordResponseBody1FromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateRecordResponseBody1$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateRecordResponseBody1' from JSON`);
}
/** @internal */
export const CreateRecordResponseBody$inboundSchema = z.union([
    z.lazy(() => CreateRecordResponseBody2$inboundSchema),
    z.lazy(() => CreateRecordResponseBody1$inboundSchema),
]);
/** @internal */
export const CreateRecordResponseBody$outboundSchema = z.union([
    z.lazy(() => CreateRecordResponseBody2$outboundSchema),
    z.lazy(() => CreateRecordResponseBody1$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateRecordResponseBody$;
(function (CreateRecordResponseBody$) {
    /** @deprecated use `CreateRecordResponseBody$inboundSchema` instead. */
    CreateRecordResponseBody$.inboundSchema = CreateRecordResponseBody$inboundSchema;
    /** @deprecated use `CreateRecordResponseBody$outboundSchema` instead. */
    CreateRecordResponseBody$.outboundSchema = CreateRecordResponseBody$outboundSchema;
})(CreateRecordResponseBody$ || (CreateRecordResponseBody$ = {}));
export function createRecordResponseBodyToJSON(createRecordResponseBody) {
    return JSON.stringify(CreateRecordResponseBody$outboundSchema.parse(createRecordResponseBody));
}
export function createRecordResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateRecordResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateRecordResponseBody' from JSON`);
}
//# sourceMappingURL=createrecordop.js.map